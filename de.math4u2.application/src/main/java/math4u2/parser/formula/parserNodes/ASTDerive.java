/* Generated By:JJTree: Do not edit this line. ASTDerive.java */

package math4u2.parser.formula.parserNodes;

import math4u2.view.formula.*;
import math4u2.view.layout.IndexLayout;
import math4u2.parser.formula.*;

/**
 * Klasse für Ableitungen.
 * 
 * @author Christoph Beckmann
 * 
 */

public class ASTDerive extends SimpleNode {

    private boolean dim = false;

    private boolean eval = false;

    private boolean isVars = false;

    public ASTDerive(int id) {
        super(id);
    }

    public ASTDerive(fsParser p, int id) {
        super(p, id);
    }

    public void setDim(boolean dim) {
        this.dim = dim;
    }

    public void setEval(boolean eval) {
        this.eval = eval;
    }

    public void setVars(boolean isVars) {
        this.isVars = isVars;
    }

    /*
     * (non-Javadoc)
     * 
     * @see math4u2.view.parser.SimpleNode#bakeComponents(math4u2.view.formula.AtomicBox)
     */
    public void bakeComponents(AtomicBox ab) {
        int startChild = 0;
        if (isVars) {
            // erste Kind (vars-Term) ignorieren
            startChild = 1;
        }
        FormulaRenderContext frc = ab.getRenderContext();
        Node child0 = jjtGetChild(startChild);
        Node child1 = jjtGetChild(startChild + 1);
        IndexedBox ib = new IndexedBox(frc);
        String degreeString = "";
        AtomicBox intDegree;
        if (child1 instanceof ASTNumber) {
            int degree = Integer.valueOf(((ASTNumber) child1).getSymbol())
                    .intValue();
            if (degree < 4) {
                for (int i = 0; i < degree; i++) {
                    degreeString += "\'";
                }
                intDegree = new OrdBox(frc, degreeString);
            } else {
                intDegree = new BracketedBox(frc);
                child1.bakeComponents(intDegree);
            }
        } else {
            intDegree = new BracketedBox(frc);
            child1.bakeComponents(intDegree);
        }

        if (child0 instanceof ASTMethodPath
                && ((ASTMethodPath) child0).isFunction()) {
            ContainerBox cb = new ContainerBox(frc);
            Node evalNode = child0.jjtGetChild(child0.jjtGetNumChildren() - 1);
            ((ASTMethodPath)child0).removeLastChild();
            child0.bakeComponents(cb);
            ib.add(cb, IndexLayout.CENTER);
            ib.add(intDegree, IndexLayout.RIGHT_TOP);
            ab.add(ib);
            if (eval) {
                jjtGetChild(jjtGetNumChildren() - 1).bakeComponents(ab);
            } else {
                evalNode.bakeComponents(ab);
            }
        } else {
            BracketedBox bb = new BracketedBox(frc);
            child0.bakeComponents(bb);
            ib.add(bb, IndexLayout.CENTER);
            ib.add(intDegree, IndexLayout.RIGHT_TOP);
            ab.add(ib);
            if (eval) {
                jjtGetChild(startChild + 2).bakeComponents(ab);
            }
        }
    }

    /*
     * (non-Javadoc)
     * 
     * @see math4u2.parser.formula.parserNodes.SimpleNode#toString()
     */
    public String toString() {
        String s = "derive(" + jjtGetChild(0).toString() + ","
                + jjtGetChild(1).toString();
        if (jjtGetNumChildren() == 3) {
            s += "," + jjtGetChild(2).toString();
        }
        s += ")";
        return s;
    }

}