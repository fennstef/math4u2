/* Generated By:JJTree&JavaCC: Do not edit this line. fsParser.java */
package math4u2.parser.formula;

import java.io.StringReader;
import java.util.*;
import math4u2.parser.formula.parserNodes.*;
import math4u2.controller.*;
import math4u2.exercises.EParser;

public class fsParser/*@bgen(jjtree)*/implements fsParserTreeConstants, fsParserConstants {/*@bgen(jjtree)*/
  protected JJTfsParserState jjtree = new JJTfsParserState();private Broker broker;
    private String formula;
    private Map modifierMap;
    public static void main(String args[]) {
        try {
            Node node=fsParser.parseFormula("a(x)_3_1_2(y)_2(z)(w)",null,null);
            System.out.println(node.toString());
            SimpleNode.treeTraversal(node);
        } catch (ParseException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

    public void setModifierMap(Map modifierMap) {
        if(modifierMap==null){
                this.modifierMap= new HashMap(1);
        }else{
                this.modifierMap= new HashMap(modifierMap);
        }
    }

    public static Node parseFormula(String formula, Map modifierMap, Broker broker)throws ParseException{
        fsParser fsp= new fsParser(new StringReader(formula));
            fsp.formula= formula;
            fsp.setModifierMap(modifierMap);
            fsp.broker = broker;
        try{
            return fsp.Start();
        }catch(ParseException pe){
            throw new ParseException("Fehler bei Formel: "+formula+"\n"+pe.getMessage());
        }
    }

    public String getFormulaString(){
        return formula;
    }

    public Map getModifierMap() {
        return modifierMap;
    }

    public Node parse(Broker broker) throws ParseException{
        this.broker=broker;
        return Start();
    }

  final public ASTStart Start() throws ParseException {
                    /*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expression();
      jj_consume_token(0);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

/*
 * Ein Ausdruck kann sein
 * - Definition wie f(x):=
 * - Relation wie x+3 = 2*y - 4
 */
  final public void Expression() throws ParseException {
    if (jj_2_1(2147483647)) {
      Definition();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADDITIONSYMBOL:
      case FUNCTION_PREFIX:
      case NABLA:
      case VOIDELEMENT:
      case DOTS:
      case ROOT:
      case SQRT:
      case LIM:
      case SUM:
      case INT:
      case PROD:
      case DERIVE:
      case PDERIVE:
      case EXIST:
      case FORALL:
      case MATHFUNCTION:
      case LOG:
      case FAC:
      case EXPO:
      case POW:
      case INVERSE:
      case TRANSPOSE:
      case VECMATH:
      case VECMATHSYMBOL:
      case UNDEFVECTOR:
      case UNDEFMATRIX:
      case FLOAT_LITERAL:
      case INTEGER_LITERAL:
      case ENUMBER:
      case INFIN:
      case EULER:
      case PI:
      case SYMBOL:
      case IDENTIFIER:
      case 65:
      case 69:
      case 72:
        RelationExpression();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/*
 * eine Definition ist gekennzeichnet durch ein ":="
 */
  final public void Definition() throws ParseException {
          ASTNormalExpression jjtn001 = new ASTNormalExpression(JJTNORMALEXPRESSION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
    try {
      FunctionExpression();
      jj_consume_token(62);
      RelationExpression();
                  jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                  jjtc001 = false;
                        jjtn001.setName(":=");
    } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
    } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
    }
  }

/*
 * eine Relation besteht aus:
 * - min. zwei Ausdrücken mit Operatoren deren Bindungsstärke nicht höher als die der Addition
 * - zwischen zwei Ausdrücken steht ein Relationszeichen: <, >, =, ...
 */
  final public void RelationExpression() throws ParseException {
        Token symbol;
    AdditiveExpression();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RELATIONSYMBOL:
      case LT:
      case GT:
      case 63:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RELATIONSYMBOL:
        symbol = jj_consume_token(RELATIONSYMBOL);
        break;
      case LT:
        symbol = jj_consume_token(LT);
        break;
      case GT:
        symbol = jj_consume_token(GT);
        break;
      case 63:
        symbol = jj_consume_token(63);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      AdditiveExpression();
                          ASTNormalExpression jjtn001 = new ASTNormalExpression(JJTNORMALEXPRESSION);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
      try {
                                  jjtree.closeNodeScope(jjtn001,  2);
                                  jjtc001 = false;
                                        jjtn001.setName(symbol.image);
      } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001,  2);
                          }
      }
    }
  }

/*
 * eine Addition besteht aus:
 * - min. zwei Ausdrücken mit Operatoren deren Bindungsstärke nicht höher als die der Multiplikation
 * - dem additionszeichen: + oder - oder +- zwischen jeweils zwei Ausdrücken
 * - der erste term kann ein vorzeichen haben
 */
  final public void AdditiveExpression() throws ParseException {
        Token symbol;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADDITIONSYMBOL:
      PraefixExpression();
      break;
    case FUNCTION_PREFIX:
    case NABLA:
    case VOIDELEMENT:
    case DOTS:
    case ROOT:
    case SQRT:
    case LIM:
    case SUM:
    case INT:
    case PROD:
    case DERIVE:
    case PDERIVE:
    case EXIST:
    case FORALL:
    case MATHFUNCTION:
    case LOG:
    case FAC:
    case EXPO:
    case POW:
    case INVERSE:
    case TRANSPOSE:
    case VECMATH:
    case VECMATHSYMBOL:
    case UNDEFVECTOR:
    case UNDEFMATRIX:
    case FLOAT_LITERAL:
    case INTEGER_LITERAL:
    case ENUMBER:
    case INFIN:
    case EULER:
    case PI:
    case SYMBOL:
    case IDENTIFIER:
    case 65:
    case 69:
    case 72:
      MultiplicativeExpression();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADDITIONSYMBOL:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      symbol = jj_consume_token(ADDITIONSYMBOL);
      MultiplicativeExpression();
                  ASTNormalExpression jjtn001 = new ASTNormalExpression(JJTNORMALEXPRESSION);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
      try {
                          jjtree.closeNodeScope(jjtn001,  2);
                          jjtc001 = false;
                                jjtn001.setName(symbol.image);
      } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
      }
    }
  }

/*
 * Eine PraefixExpression hat zwei kinder
 * - das Praefix
 * - einem mult-Ausdruck 
 */
  final public void PraefixExpression() throws ParseException {
                            /*@bgen(jjtree) PraefixExpression */
  ASTPraefixExpression jjtn000 = new ASTPraefixExpression(JJTPRAEFIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Praefix();
      MultiplicativeExpression();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/*
 * ein PraefixOperator wie:  "-" kann auch ein "+" sein. 
 */
  final public void Praefix() throws ParseException {
                  /*@bgen(jjtree) Praefix */
        ASTPraefix jjtn000 = new ASTPraefix(JJTPRAEFIX);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token symbol;
    try {
      symbol = jj_consume_token(ADDITIONSYMBOL);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setName(symbol.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/*
 * eine Multiplikation besteht aus:
 * - min zwei Ausdrücken mit Operatoren deren Bindungsstärke nicht höher als Division
 * - dem multiplikationszeichen zwischen jeweils 2 Operanden
 */
  final public void MultiplicativeExpression() throws ParseException {
        Token symbol;
    DivisiveExpression();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLICATIONSYMBOL:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      symbol = jj_consume_token(MULTIPLICATIONSYMBOL);
      DivisiveExpression();
                  ASTNormalExpression jjtn001 = new ASTNormalExpression(JJTNORMALEXPRESSION);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
      try {
                          jjtree.closeNodeScope(jjtn001,  2);
                          jjtc001 = false;
                                jjtn001.setName(symbol.image);
      } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
      }
    }
  }

/*
 * eine Division wird extra behandelt 
 * um einen Ausdruck wie 3*4/5 wie 3*(4/5) darzustellen 
 * die 3 steht so vor dem bruch
 */
  final public void DivisiveExpression() throws ParseException {
    ExponentialExpression();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIVIDE:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
      jj_consume_token(DIVIDE);
                           ASTDiv jjtn001 = new ASTDiv(JJTDIV);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
      try {
        ExponentialExpression();
      } catch (Throwable jjte001) {
                           if (jjtc001) {
                             jjtree.clearNodeScope(jjtn001);
                             jjtc001 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte001 instanceof RuntimeException) {
                             {if (true) throw (RuntimeException)jjte001;}
                           }
                           if (jjte001 instanceof ParseException) {
                             {if (true) throw (ParseException)jjte001;}
                           }
                           {if (true) throw (Error)jjte001;}
      } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001,  2);
                           }
      }
    }
  }

/*
 * Ein exponentieller Ausdruck ist gekennzeichnet durch:
 * - min zwei Ausdrücken ohne Präfix- und Infixoperatoren
 * - ein Dach "^" zwischen jeweils zwei Ausdrücken
 */
  final public void ExponentialExpression() throws ParseException {
    PostfixExpression();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 64:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_5;
      }
      jj_consume_token(64);
                      ASTExpo jjtn001 = new ASTExpo(JJTEXPO);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
      try {
        PostfixExpression();
      } catch (Throwable jjte001) {
                      if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte001 instanceof RuntimeException) {
                        {if (true) throw (RuntimeException)jjte001;}
                      }
                      if (jjte001 instanceof ParseException) {
                        {if (true) throw (ParseException)jjte001;}
                      }
                      {if (true) throw (Error)jjte001;}
      } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001,  2);
                      }
      }
    }
  }

/*
*Eine Postfix Expression ist gekennzeichnet durch: 
*- einen Term,ohne Infix- und Praefixoperatoren
* -einem Postfixoperator
*/
  final public void PostfixExpression() throws ParseException {
          ASTPostfixExpression jjtn001 = new ASTPostfixExpression(JJTPOSTFIXEXPRESSION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
    try {
      if (jj_2_2(2147483647)) {
        SymbolExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FUNCTION_PREFIX:
        case NABLA:
        case VOIDELEMENT:
        case DOTS:
        case ROOT:
        case SQRT:
        case LIM:
        case SUM:
        case INT:
        case PROD:
        case DERIVE:
        case PDERIVE:
        case EXIST:
        case FORALL:
        case MATHFUNCTION:
        case LOG:
        case FAC:
        case EXPO:
        case POW:
        case INVERSE:
        case TRANSPOSE:
        case VECMATH:
        case VECMATHSYMBOL:
        case UNDEFVECTOR:
        case UNDEFMATRIX:
        case FLOAT_LITERAL:
        case INTEGER_LITERAL:
        case ENUMBER:
        case INFIN:
        case EULER:
        case PI:
        case SYMBOL:
        case IDENTIFIER:
        case 65:
        case 69:
        case 72:
          FunctionExpression();
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POSTFIX:
        Postfix();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
    } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
    } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
    }
  }

/*
 * ein Postfix operator wie "!" (Fakultät)
*/
  final public void Postfix() throws ParseException {
                  /*@bgen(jjtree) Postfix */
        ASTPostfix jjtn000 = new ASTPostfix(JJTPOSTFIX);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token symbol;
    try {
      symbol = jj_consume_token(POSTFIX);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setName(symbol.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/*
 * Ein Ausdruck mit dem Nabla-symbol
 * Nabla kann vor , hinter einem Ausdruck und alleine stehen
 */
  final public void SymbolExpression() throws ParseException {
                           /*@bgen(jjtree) SymbolExpression */
  ASTSymbolExpression jjtn000 = new ASTSymbolExpression(JJTSYMBOLEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      FunctionExpression();
      SpecialSymbol();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/*
 * der Nabla-knoten
 */
  final public void SpecialSymbol() throws ParseException {
                        /*@bgen(jjtree) SpecialSymbol */
        ASTSpecialSymbol jjtn000 = new ASTSpecialSymbol(JJTSPECIALSYMBOL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token symbol;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NABLA:
        symbol = jj_consume_token(NABLA);
        break;
      case DOTS:
        symbol = jj_consume_token(DOTS);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setName(symbol.image);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void FunctionExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NABLA:
    case VOIDELEMENT:
    case DOTS:
    case VECMATHSYMBOL:
    case UNDEFVECTOR:
    case UNDEFMATRIX:
    case SYMBOL:
    case IDENTIFIER:
      MethodPath();
      break;
    case FUNCTION_PREFIX:
    case ROOT:
    case SQRT:
    case LIM:
    case SUM:
    case INT:
    case PROD:
    case DERIVE:
    case PDERIVE:
    case EXIST:
    case FORALL:
    case MATHFUNCTION:
    case LOG:
    case FAC:
    case EXPO:
    case POW:
    case INVERSE:
    case TRANSPOSE:
    case VECMATH:
      Function();
      break;
    case FLOAT_LITERAL:
    case INTEGER_LITERAL:
    case ENUMBER:
    case INFIN:
    case EULER:
    case PI:
      Number();
      break;
    case 65:
    case 69:
    case 72:
      Brackets();
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Function() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUNCTION_PREFIX:
      FunctionDetailChooser();
      break;
    case MATHFUNCTION:
    case LOG:
      MathFunction();
      break;
    case SUM:
    case INT:
    case PROD:
    case DERIVE:
    case PDERIVE:
    case EXIST:
    case FORALL:
    case INVERSE:
    case TRANSPOSE:
      SpecialFunction();
      break;
    case FAC:
    case EXPO:
    case POW:
      DoubleFunction();
      break;
    case ROOT:
    case SQRT:
      Root();
      break;
    case LIM:
      Limes();
      break;
    case VECMATH:
      VecmathDefinition();
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*
 * eine eigens definierte Funktion wie f(x), kann auch einen index haben f[1](x)
*/
  final public void MethodPath() throws ParseException {
          ASTMethodPath jjtn001 = new ASTMethodPath(JJTMETHODPATH);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
    try {
      Variable();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 65:
        case 69:
        case 71:
        case 73:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_6;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 65:
          EvalStep();
                                 jjtn001.setFunction(true);
          break;
        case 69:
        case 71:
        case 73:
          Indeces();
                                 jjtn001.setFunction(false);
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
                  jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                  jjtc001 = false;
                        jjtn001.setModifierMap(modifierMap);
                        jjtn001.setBroker(broker);
    } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
    } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
    }
  }

  final public void FunctionDetailChooser() throws ParseException {
                              /*@bgen(jjtree) FunctionDetailChooser */
        ASTFunctionDetailChooser jjtn000 = new ASTFunctionDetailChooser(JJTFUNCTIONDETAILCHOOSER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token type;
    try {
      type = jj_consume_token(FUNCTION_PREFIX);
                jjtn000.setName(type.image);
                jjtn000.setBroker(broker);
                jjtn000.setModifierMap(modifierMap);
      jj_consume_token(65);
      MethodPath();
      jj_consume_token(66);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/*
 * Funktionen, wie: sin, cos, tan,...
*/
  final public void MathFunction() throws ParseException {
                       /*@bgen(jjtree) MathFunction */
        ASTMathFunction jjtn000 = new ASTMathFunction(JJTMATHFUNCTION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token type;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MATHFUNCTION:
        type = jj_consume_token(MATHFUNCTION);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 65:
          jj_consume_token(65);
          AdditiveExpression();
          jj_consume_token(66);
          break;
        default:
          jj_la1[15] = jj_gen;
          ;
        }
        break;
      case LOG:
        type = jj_consume_token(LOG);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 65:
          TwoDigitFunction();
          break;
        default:
          jj_la1[16] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setName(type.image);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/*
 * spezielle Funktionen sind sum(..), int(..), prod(..) usw.
*/
  final public void SpecialFunction() throws ParseException {
        Token symbol;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUM:
    case INT:
    case PROD:
          ASTSpecialFunction jjtn001 = new ASTSpecialFunction(JJTSPECIALFUNCTION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SUM:
          symbol = jj_consume_token(SUM);
          Sum();
                          jjtree.closeNodeScope(jjtn001, true);
                          jjtc001 = false;
                                jjtn001.setName(symbol.image);
          break;
        case PROD:
          symbol = jj_consume_token(PROD);
          Prod();
                          jjtree.closeNodeScope(jjtn001, true);
                          jjtc001 = false;
                                jjtn001.setName(symbol.image);
          break;
        case INT:
          symbol = jj_consume_token(INT);
          Int();
                          jjtree.closeNodeScope(jjtn001, true);
                          jjtc001 = false;
                                jjtn001.setName(symbol.image);
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
      }
      break;
    case DERIVE:
      Derive();
      break;
    case PDERIVE:
      PDerive();
      break;
    case TRANSPOSE:
      Transpose();
      break;
    case INVERSE:
      Inverse();
      break;
    case EXIST:
      symbol = jj_consume_token(EXIST);
      Exist();
      break;
    case FORALL:
      symbol = jj_consume_token(FORALL);
      ForAll();
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Sum() throws ParseException {
    jj_consume_token(65);
    FunctionExpression();
    jj_consume_token(63);
    AdditiveExpression();
    jj_consume_token(63);
    AdditiveExpression();
    jj_consume_token(63);
    AdditiveExpression();
    jj_consume_token(66);
  }

  final public void Prod() throws ParseException {
    jj_consume_token(65);
    FunctionExpression();
    jj_consume_token(63);
    AdditiveExpression();
    jj_consume_token(63);
    AdditiveExpression();
    jj_consume_token(63);
    AdditiveExpression();
    jj_consume_token(66);
  }

  final public void Derive() throws ParseException {
                 /*@bgen(jjtree) Derive */
  ASTDerive jjtn000 = new ASTDerive(JJTDERIVE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DERIVE);
      jj_consume_token(65);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARS:
        jj_consume_token(VARS);
        EvalStep();
        jj_consume_token(63);
                        jjtn000.setVars(true);
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      AdditiveExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 63:
        jj_consume_token(63);
        AdditiveExpression();
        jj_consume_token(66);
                                jjtn000.setDim(true);
        break;
      case 66:
                  ASTNumber jjtn001 = new ASTNumber(JJTNUMBER);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(66);
                          jjtree.closeNodeScope(jjtn001, true);
                          jjtc001 = false;
                         jjtn001.setName("1");
        } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                  }
        }
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 65:
        EvalStep();
                    jjtn000.setEval(true);
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void PDerive() throws ParseException {
                  /*@bgen(jjtree) PDerive */
  ASTPDerive jjtn000 = new ASTPDerive(JJTPDERIVE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PDERIVE);
      jj_consume_token(65);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARS:
        jj_consume_token(VARS);
        EvalStep();
        jj_consume_token(63);
                        jjtn000.setVars(true);
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      AdditiveExpression();
      label_7:
      while (true) {
        jj_consume_token(63);
        FunctionExpression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 63:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_7;
        }
      }
      jj_consume_token(66);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 65:
        EvalStep();
                        jjtn000.setEval(true);
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Int() throws ParseException {
    jj_consume_token(65);
    FunctionExpression();
    jj_consume_token(63);
    AdditiveExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 63:
      jj_consume_token(63);
      AdditiveExpression();
      jj_consume_token(63);
      AdditiveExpression();
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    jj_consume_token(66);
  }

  final public void Transpose() throws ParseException {
          ASTExpo jjtn002 = new ASTExpo(JJTEXPO);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
    try {
      jj_consume_token(TRANSPOSE);
      jj_consume_token(65);
      Variable();
      jj_consume_token(66);
                  ASTSymbol jjtn001 = new ASTSymbol(JJTSYMBOL);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
      try {
                          jjtree.closeNodeScope(jjtn001, true);
                          jjtc001 = false;
                         jjtn001.setName("T");
      } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                  }
      }
    } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
    } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
    }
  }

  final public void Inverse() throws ParseException {
          ASTExpo jjtn002 = new ASTExpo(JJTEXPO);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
    try {
      jj_consume_token(INVERSE);
      jj_consume_token(65);
      Variable();
      jj_consume_token(66);
                                       ASTNumber jjtn001 = new ASTNumber(JJTNUMBER);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
      try {
                                        jjtree.closeNodeScope(jjtn001, true);
                                        jjtc001 = false;
                                       jjtn001.setName("-1");
      } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001, true);
                                       }
      }
    } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
    } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
    }
  }

// 3-stellige funktion schreibweise und parameter??
  final public void Exist() throws ParseException {
    jj_consume_token(65);
    FunctionExpression();
    jj_consume_token(63);
    FunctionExpression();
    jj_consume_token(63);
    FunctionExpression();
    jj_consume_token(66);
  }

// 3-stellige funktion schreibweise und parameter??
  final public void ForAll() throws ParseException {
    jj_consume_token(65);
    FunctionExpression();
    jj_consume_token(63);
    FunctionExpression();
    jj_consume_token(63);
    FunctionExpression();
    jj_consume_token(66);
  }

// body für 2-stellige Funktionen
  final public void TwoDigitFunction() throws ParseException {
    jj_consume_token(65);
    AdditiveExpression();
    jj_consume_token(63);
    AdditiveExpression();
    jj_consume_token(66);
  }

/**
 * Ausdrücke die sowohl durch OperationsZeichen als auch durch Funktionen erzeugt werden können
 * expo(..,..) und fac(..)
 */
  final public void DoubleFunction() throws ParseException {
        Token type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FAC:
          ASTPostfixExpression jjtn003 = new ASTPostfixExpression(JJTPOSTFIXEXPRESSION);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(FAC);
        jj_consume_token(65);
                  ASTBrackets jjtn001 = new ASTBrackets(JJTBRACKETS);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
        try {
          AdditiveExpression();
        } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte001;}
                  }
                  if (jjte001 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte001;}
                  }
                  {if (true) throw (Error)jjte001;}
        } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  ( ( SimpleNode ) jjtree . peekNode ( ) ) . getId ( ) < 16);
                  }
        }
        jj_consume_token(66);
                  ASTPostfix jjtn002 = new ASTPostfix(JJTPOSTFIX);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
        try {
                          jjtree.closeNodeScope(jjtn002, true);
                          jjtc002 = false;
                                jjtn002.setName("!");
        } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                  }
        }
      } catch (Throwable jjte003) {
          if (jjtc003) {
            jjtree.clearNodeScope(jjtn003);
            jjtc003 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte003 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte003;}
          }
          if (jjte003 instanceof ParseException) {
            {if (true) throw (ParseException)jjte003;}
          }
          {if (true) throw (Error)jjte003;}
      } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
          }
      }
      break;
    case POW:
          ASTExpo jjtn006 = new ASTExpo(JJTEXPO);
          boolean jjtc006 = true;
          jjtree.openNodeScope(jjtn006);
      try {
        jj_consume_token(POW);
        jj_consume_token(65);
                  ASTBrackets jjtn004 = new ASTBrackets(JJTBRACKETS);
                  boolean jjtc004 = true;
                  jjtree.openNodeScope(jjtn004);
        try {
          AdditiveExpression();
        } catch (Throwable jjte004) {
                  if (jjtc004) {
                    jjtree.clearNodeScope(jjtn004);
                    jjtc004 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte004 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte004;}
                  }
                  if (jjte004 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte004;}
                  }
                  {if (true) throw (Error)jjte004;}
        } finally {
                  if (jjtc004) {
                    jjtree.closeNodeScope(jjtn004,  ( ( SimpleNode ) jjtree . peekNode ( ) ) . getId ( ) < 18);
                  }
        }
        jj_consume_token(63);
                      ASTBrackets jjtn005 = new ASTBrackets(JJTBRACKETS);
                      boolean jjtc005 = true;
                      jjtree.openNodeScope(jjtn005);
        try {
          AdditiveExpression();
        } catch (Throwable jjte005) {
                      if (jjtc005) {
                        jjtree.clearNodeScope(jjtn005);
                        jjtc005 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte005 instanceof RuntimeException) {
                        {if (true) throw (RuntimeException)jjte005;}
                      }
                      if (jjte005 instanceof ParseException) {
                        {if (true) throw (ParseException)jjte005;}
                      }
                      {if (true) throw (Error)jjte005;}
        } finally {
                      if (jjtc005) {
                        jjtree.closeNodeScope(jjtn005, true);
                      }
        }
        jj_consume_token(66);
      } catch (Throwable jjte006) {
          if (jjtc006) {
            jjtree.clearNodeScope(jjtn006);
            jjtc006 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte006 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte006;}
          }
          if (jjte006 instanceof ParseException) {
            {if (true) throw (ParseException)jjte006;}
          }
          {if (true) throw (Error)jjte006;}
      } finally {
          if (jjtc006) {
            jjtree.closeNodeScope(jjtn006, true);
          }
      }
      break;
    case EXPO:
          ASTExpo jjtn009 = new ASTExpo(JJTEXPO);
          boolean jjtc009 = true;
          jjtree.openNodeScope(jjtn009);
      try {
        jj_consume_token(EXPO);
        jj_consume_token(65);
                  ASTNumber jjtn007 = new ASTNumber(JJTNUMBER);
                  boolean jjtc007 = true;
                  jjtree.openNodeScope(jjtn007);
        try {
                          jjtree.closeNodeScope(jjtn007, true);
                          jjtc007 = false;
                                jjtn007.setName("e");
        } finally {
                  if (jjtc007) {
                    jjtree.closeNodeScope(jjtn007, true);
                  }
        }
                  ASTBrackets jjtn008 = new ASTBrackets(JJTBRACKETS);
                  boolean jjtc008 = true;
                  jjtree.openNodeScope(jjtn008);
        try {
          AdditiveExpression();
        } catch (Throwable jjte008) {
                  if (jjtc008) {
                    jjtree.clearNodeScope(jjtn008);
                    jjtc008 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte008 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte008;}
                  }
                  if (jjte008 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte008;}
                  }
                  {if (true) throw (Error)jjte008;}
        } finally {
                  if (jjtc008) {
                    jjtree.closeNodeScope(jjtn008, true);
                  }
        }
        jj_consume_token(66);
      } catch (Throwable jjte009) {
          if (jjtc009) {
            jjtree.clearNodeScope(jjtn009);
            jjtc009 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte009 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte009;}
          }
          if (jjte009 instanceof ParseException) {
            {if (true) throw (ParseException)jjte009;}
          }
          {if (true) throw (Error)jjte009;}
      } finally {
          if (jjtc009) {
            jjtree.closeNodeScope(jjtn009, true);
          }
      }
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Root() throws ParseException {
               /*@bgen(jjtree) Root */
        ASTRoot jjtn000 = new ASTRoot(JJTROOT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token symbol;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SQRT:
        symbol = jj_consume_token(SQRT);
        jj_consume_token(65);
        AdditiveExpression();
        jj_consume_token(66);
                          ASTNumber jjtn001 = new ASTNumber(JJTNUMBER);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
        try {
                                  jjtree.closeNodeScope(jjtn001, true);
                                  jjtc001 = false;
                                 jjtn001.setName("2");
        } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001, true);
                          }
        }
        break;
      case ROOT:
        symbol = jj_consume_token(ROOT);
        jj_consume_token(65);
        AdditiveExpression();
        jj_consume_token(63);
        AdditiveExpression();
        jj_consume_token(66);
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setName(symbol.image);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Limes() throws ParseException {
              /*@bgen(jjtree) Limes */
        ASTLimes jjtn000 = new ASTLimes(JJTLIMES);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token symbol;
    try {
      symbol = jj_consume_token(LIM);
                        jjtn000.setName(symbol.image);
      jj_consume_token(65);
      jj_consume_token(VARS);
      jj_consume_token(65);
      Ident();
      jj_consume_token(66);
      jj_consume_token(63);
      AdditiveExpression();
      jj_consume_token(63);
      AdditiveExpression();
      jj_consume_token(66);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/*
 * spezieller Ausdruck zur Definition von Vektoren und Matrizen 
*/
  final public void VecmathDefinition() throws ParseException {
                            /*@bgen(jjtree) VecmathDefinition */
        ASTVecmathDefinition jjtn000 = new ASTVecmathDefinition(JJTVECMATHDEFINITION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);int test;
        int test2;
        Token type;
    try {
      type = jj_consume_token(VECMATH);
                jjtn000.setName(type.image);
      jj_consume_token(65);
      if (jj_2_3(2)) {
        jj_consume_token(67);
        test = Braces();
        jj_consume_token(68);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 67:
          jj_consume_token(67);
          jj_consume_token(67);
          test = Braces();
          jj_consume_token(68);
          label_8:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 63:
              ;
              break;
            default:
              jj_la1[29] = jj_gen;
              break label_8;
            }
            jj_consume_token(63);
            jj_consume_token(67);
            test2 = Braces();
            jj_consume_token(68);
                                        if (test != test2)
                                        {
                                                {if (true) throw new ParseException(
                                                        "Ungleiche Spalten bei Matrix in Zeile: " + token.next.beginLine);}
                                        }
          }
          jj_consume_token(68);
          break;
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(66);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void EvalStep() throws ParseException {
                   /*@bgen(jjtree) EvalStep */
  ASTEvalStep jjtn000 = new ASTEvalStep(JJTEVALSTEP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(65);
      AdditiveExpression();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 63:
          ;
          break;
        default:
          jj_la1[31] = jj_gen;
          break label_9;
        }
        jj_consume_token(63);
        AdditiveExpression();
      }
      jj_consume_token(66);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/*
 * wird zur Definition von Vektoren und Matrizen verwendet "{...}"
 */
  final public int Braces() throws ParseException {
                /*@bgen(jjtree) Braces */
        ASTBraces jjtn000 = new ASTBraces(JJTBRACES);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);int counter= 1;
    try {
      AdditiveExpression();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 63:
          ;
          break;
        default:
          jj_la1[32] = jj_gen;
          break label_10;
        }
        jj_consume_token(63);
        AdditiveExpression();
                        counter++;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return counter;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

/*
 * ein Indeces- Knoten
 */
  final public void Indeces() throws ParseException {
                 /*@bgen(jjtree) Indeces */
        ASTIndeces jjtn000 = new ASTIndeces(JJTINDECES);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 69:
        jj_consume_token(69);
        AdditiveExpression();
        label_11:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 63:
            ;
            break;
          default:
            jj_la1[33] = jj_gen;
            break label_11;
          }
          jj_consume_token(63);
          AdditiveExpression();
        }
        jj_consume_token(70);
                                                                              jjtree.closeNodeScope(jjtn000, true);
                                                                              jjtc000 = false;
                                                                             jjtn000.setName("[");
        break;
      case 73:
        PointExpression();
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                   jjtn000.setName(".");
        break;
      case 71:
        jj_consume_token(71);
                         jjtn000.setName("_");
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FLOAT_LITERAL:
        case INTEGER_LITERAL:
        case ENUMBER:
        case INFIN:
        case EULER:
        case PI:
          Number();
          break;
        case STRUCTURE:
                                  ASTIdent jjtn001 = new ASTIdent(JJTIDENT);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
          try {
            t = jj_consume_token(STRUCTURE);
                                          jjtree.closeNodeScope(jjtn001, true);
                                          jjtc001 = false;
                                         jjtn001.setName(t.image);
          } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001, true);
                                  }
          }
          break;
        case VOIDELEMENT:
        case SYMBOL:
        case IDENTIFIER:
          Ident();
          break;
        case ROOT:
        case SQRT:
        case LIM:
        case SUM:
        case INT:
        case PROD:
        case DERIVE:
        case PDERIVE:
        case EXIST:
        case FORALL:
        case VARS:
        case MATHFUNCTION:
        case LOG:
        case FAC:
        case EXPO:
        case POW:
        case INVERSE:
        case TRANSPOSE:
        case VECMATH:
          FunctionHeader();
          break;
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

/*
 * ein geklammerter Ausdruck. sowohl "(...)" als auch "|...|"
 */
  final public void Brackets() throws ParseException {
                   /*@bgen(jjtree) Brackets */
        ASTBrackets jjtn000 = new ASTBrackets(JJTBRACKETS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token symbol;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 65:
        symbol = jj_consume_token(65);
        Expression();
        jj_consume_token(66);
        break;
      case 72:
        symbol = jj_consume_token(72);
        AdditiveExpression();
        jj_consume_token(72);
        break;
      case 69:
        symbol = jj_consume_token(69);
        AdditiveExpression();
        jj_consume_token(70);
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setName(symbol.image);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/*
 * eine Variable kann sowohl ein Identifier als auch ein symbol wie gr. Buchstabe sein
 * außerdem kann es ein Nabla sein oder ein Nabla und eine variable.
 */
  final public void Variable() throws ParseException {
          ASTSymbolExpression jjtn001 = new ASTSymbolExpression(JJTSYMBOLEXPRESSION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NABLA:
      case DOTS:
        SpecialSymbol();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VOIDELEMENT:
        case VECMATHSYMBOL:
        case UNDEFVECTOR:
        case UNDEFMATRIX:
        case SYMBOL:
        case IDENTIFIER:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VOIDELEMENT:
          case SYMBOL:
          case IDENTIFIER:
            Ident();
            break;
          case UNDEFVECTOR:
            UndefinedVector();
            break;
          case VECMATHSYMBOL:
            VecmathSymbol();
            break;
          case UNDEFMATRIX:
            UndefinedMatrix();
            break;
          default:
            jj_la1[37] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[38] = jj_gen;
          ;
        }
        break;
      case VOIDELEMENT:
      case VECMATHSYMBOL:
      case UNDEFVECTOR:
      case UNDEFMATRIX:
      case SYMBOL:
      case IDENTIFIER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VOIDELEMENT:
        case SYMBOL:
        case IDENTIFIER:
          Ident();
          break;
        case UNDEFVECTOR:
          UndefinedVector();
          break;
        case VECMATHSYMBOL:
          VecmathSymbol();
          break;
        case UNDEFMATRIX:
          UndefinedMatrix();
          break;
        default:
          jj_la1[39] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
    } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
    }
  }

  final public void VecmathSymbol() throws ParseException {
                        /*@bgen(jjtree) VecmathSymbol */
        ASTVecmathSymbol jjtn000 = new ASTVecmathSymbol(JJTVECMATHSYMBOL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(VECMATHSYMBOL);
                        jjtn000.setName(t.image);
      Ident();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void UndefinedVector() throws ParseException {
                          /*@bgen(jjtree) UndefinedVector */
        ASTUndefinedVector jjtn000 = new ASTUndefinedVector(JJTUNDEFINEDVECTOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
        Token t2;
    try {
      t = jj_consume_token(UNDEFVECTOR);
                jjtn000.setName(t.image);
                  ASTNumber jjtn001 = new ASTNumber(JJTNUMBER);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
          t2 = jj_consume_token(INTEGER_LITERAL);
          break;
        case IDENTIFIER:
          t2 = jj_consume_token(IDENTIFIER);
          break;
        default:
          jj_la1[41] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                          jjtree.closeNodeScope(jjtn001, true);
                          jjtc001 = false;
                                jjtn001.setName(t2.image);
      } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                  }
      }
      jj_consume_token(66);
      jj_consume_token(GT);
      Ident();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  //erstellt eine matrix mit werten vom Typ m[1][1],m[1][2],...,m[1][n],m[2][1],...m[n][k];
  final public void UndefinedMatrix() throws ParseException {
                          /*@bgen(jjtree) UndefinedMatrix */
        ASTUndefinedMatrix jjtn000 = new ASTUndefinedMatrix(JJTUNDEFINEDMATRIX);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(UNDEFMATRIX);
          ASTNumber jjtn001 = new ASTNumber(JJTNUMBER);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
          t = jj_consume_token(INTEGER_LITERAL);
          break;
        case IDENTIFIER:
          t = jj_consume_token(IDENTIFIER);
          break;
        default:
          jj_la1[42] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                  jjtree.closeNodeScope(jjtn001, true);
                  jjtc001 = false;
                        jjtn001.setName(t.image);
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
      }
      jj_consume_token(63);
          ASTNumber jjtn002 = new ASTNumber(JJTNUMBER);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
          t = jj_consume_token(INTEGER_LITERAL);
          break;
        case IDENTIFIER:
          t = jj_consume_token(IDENTIFIER);
          break;
        default:
          jj_la1[43] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                  jjtree.closeNodeScope(jjtn002, true);
                  jjtc002 = false;
                        jjtn002.setName(t.image);
      } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
      }
      jj_consume_token(66);
      jj_consume_token(GT);
      Ident();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void PointExpression() throws ParseException {
    jj_consume_token(73);
    Ident();
  }

  final public void FunctionHeader() throws ParseException {
Token t;
          ASTIdent jjtn001 = new ASTIdent(JJTIDENT);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ROOT:
        t = jj_consume_token(ROOT);
        break;
      case SQRT:
        t = jj_consume_token(SQRT);
        break;
      case LIM:
        t = jj_consume_token(LIM);
        break;
      case SUM:
        t = jj_consume_token(SUM);
        break;
      case INT:
        t = jj_consume_token(INT);
        break;
      case PROD:
        t = jj_consume_token(PROD);
        break;
      case DERIVE:
        t = jj_consume_token(DERIVE);
        break;
      case PDERIVE:
        t = jj_consume_token(PDERIVE);
        break;
      case EXIST:
        t = jj_consume_token(EXIST);
        break;
      case FORALL:
        t = jj_consume_token(FORALL);
        break;
      case VARS:
        t = jj_consume_token(VARS);
        break;
      case MATHFUNCTION:
        t = jj_consume_token(MATHFUNCTION);
        break;
      case LOG:
        t = jj_consume_token(LOG);
        break;
      case FAC:
        t = jj_consume_token(FAC);
        break;
      case EXPO:
        t = jj_consume_token(EXPO);
        break;
      case POW:
        t = jj_consume_token(POW);
        break;
      case INVERSE:
        t = jj_consume_token(INVERSE);
        break;
      case TRANSPOSE:
        t = jj_consume_token(TRANSPOSE);
        break;
      case VECMATH:
        t = jj_consume_token(VECMATH);
        break;
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn001, true);
                  jjtc001 = false;
                 jjtn001.setName(t.image);
    } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
    }
  }

  final public void Ident() throws ParseException {
        Token symbol;
        String s;
          ASTSpecialIdent jjtn001 = new ASTSpecialIdent(JJTSPECIALIDENT);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
    try {
      PureIdent();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 74:
        symbol = jj_consume_token(74);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FLOAT_LITERAL:
        case INTEGER_LITERAL:
        case ENUMBER:
        case INFIN:
        case EULER:
        case PI:
          Number();
          break;
        case VOIDELEMENT:
        case SYMBOL:
        case IDENTIFIER:
          PureIdent();
          break;
        default:
          jj_la1[45] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                jjtn001.setName(symbol.image);
                                jjtn001.setModifierMap(modifierMap);
                                jjtn001.setBroker(broker);
        break;
      default:
        jj_la1[46] = jj_gen;
        ;
      }
    } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
    } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
    }
  }

  final public void PureIdent() throws ParseException {
        Token t;
        String s;
          ASTIdent jjtn001 = new ASTIdent(JJTIDENT);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
        break;
      case SYMBOL:
        t = jj_consume_token(SYMBOL);
        break;
      case VOIDELEMENT:
        t = jj_consume_token(VOIDELEMENT);
        break;
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn001, true);
                  jjtc001 = false;
                        jjtn001.setName(t.image);
                        Map m = (Map)modifierMap.get(t.image);
                        if(m!=null){
                                jjtn001.setModifier(m);
                                jjtn001.setBroker(broker);
                        }
    } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
    }
  }

  final public void Number() throws ParseException {
                 /*@bgen(jjtree) Number */
        ASTNumber jjtn000 = new ASTNumber(JJTNUMBER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token symbol;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FLOAT_LITERAL:
      case INTEGER_LITERAL:
      case INFIN:
      case EULER:
      case PI:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INFIN:
          symbol = jj_consume_token(INFIN);
          break;
        case EULER:
          symbol = jj_consume_token(EULER);
          break;
        case PI:
          symbol = jj_consume_token(PI);
          break;
        case FLOAT_LITERAL:
          symbol = jj_consume_token(FLOAT_LITERAL);
          break;
        case INTEGER_LITERAL:
          symbol = jj_consume_token(INTEGER_LITERAL);
          break;
        default:
          jj_la1[48] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setName(symbol.image);
        break;
      case ENUMBER:
        symbol = jj_consume_token(ENUMBER);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                        jjtn000.setName(symbol.image.replace('e','E'));
        break;
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_3R_120() {
    if (jj_scan_token(73)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_scan_token(63)) return true;
    if (jj_scan_token(67)) return true;
    if (jj_3R_14()) return true;
    if (jj_scan_token(68)) return true;
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_scan_token(PDERIVE)) return true;
    if (jj_scan_token(65)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_133()) jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    if (jj_3R_134()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_134()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(66)) return true;
    xsp = jj_scanpos;
    if (jj_3R_135()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_12() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(62)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_12()) return true;
    return false;
  }

  final private boolean jj_3R_131() {
    if (jj_scan_token(66)) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_scan_token(65)) return true;
    if (jj_3R_18()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_98()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(66)) return true;
    return false;
  }

  final private boolean jj_3R_132() {
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_13() {
    if (jj_3R_15()) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3R_130() {
    if (jj_scan_token(63)) return true;
    if (jj_3R_18()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_3R_12()) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    }
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_scan_token(VARS)) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(63)) return true;
    return false;
  }

  final private boolean jj_3R_139() {
    if (jj_3R_142()) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_scan_token(67)) return true;
    if (jj_scan_token(67)) return true;
    if (jj_3R_14()) return true;
    if (jj_scan_token(68)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_115()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(68)) return true;
    return false;
  }

  final private boolean jj_3R_142() {
    if (jj_scan_token(POSTFIX)) return true;
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_scan_token(UNDEFMATRIX)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) return true;
    }
    if (jj_scan_token(63)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) return true;
    }
    if (jj_scan_token(66)) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(67)) return true;
    if (jj_3R_14()) return true;
    if (jj_scan_token(68)) return true;
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_scan_token(DERIVE)) return true;
    if (jj_scan_token(65)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_129()) jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    xsp = jj_scanpos;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_132()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_127() {
    if (jj_scan_token(65)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(63)) return true;
    if (jj_3R_18()) return true;
    if (jj_scan_token(63)) return true;
    if (jj_3R_18()) return true;
    if (jj_scan_token(63)) return true;
    if (jj_3R_18()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_scan_token(VECMATH)) return true;
    if (jj_scan_token(65)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) return true;
    }
    if (jj_scan_token(66)) return true;
    return false;
  }

  final private boolean jj_3R_126() {
    if (jj_scan_token(65)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(63)) return true;
    if (jj_3R_18()) return true;
    if (jj_scan_token(63)) return true;
    if (jj_3R_18()) return true;
    if (jj_scan_token(63)) return true;
    if (jj_3R_18()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_139()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_scan_token(FORALL)) return true;
    if (jj_3R_112()) return true;
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_scan_token(64)) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_scan_token(UNDEFVECTOR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) return true;
    }
    if (jj_scan_token(66)) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_scan_token(EXIST)) return true;
    if (jj_3R_111()) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_3R_110()) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_3R_109()) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_3R_97()) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_3R_108()) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_3R_90()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_116()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_3R_96()) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_scan_token(INT)) return true;
    if (jj_3R_128()) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_3R_107()) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_scan_token(DIVIDE)) return true;
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_scan_token(LIM)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_scan_token(VARS)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(66)) return true;
    if (jj_scan_token(63)) return true;
    if (jj_3R_18()) return true;
    if (jj_scan_token(63)) return true;
    if (jj_3R_18()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_3R_85()) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_scan_token(ENUMBER)) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_scan_token(VECMATHSYMBOL)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_3R_97()) return true;
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_scan_token(PROD)) return true;
    if (jj_3R_127()) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_scan_token(ROOT)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_18()) return true;
    if (jj_scan_token(63)) return true;
    if (jj_3R_18()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_scan_token(65)) return true;
    if (jj_3R_18()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_3R_96()) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_3R_85()) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_3R_63()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_89()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_scan_token(SUM)) return true;
    if (jj_3R_126()) return true;
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_3R_125()) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(SQRT)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_18()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_scan_token(MULTIPLICATIONSYMBOL)) return true;
    if (jj_3R_49()) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    return false;
  }

  final private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_73() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_58() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) return true;
    }
    return false;
  }

  final private boolean jj_3R_137() {
    if (jj_3R_113()) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_scan_token(LOG)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_3R_49()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_62()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_scan_token(MATHFUNCTION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_136() {
    if (jj_3R_29()) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_3R_17()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) return true;
    }
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_scan_token(EXPO)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_18()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    }
    return false;
  }

  final private boolean jj_3R_113() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_scan_token(ADDITIONSYMBOL)) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_scan_token(POW)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_18()) return true;
    if (jj_scan_token(63)) return true;
    if (jj_3R_18()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_scan_token(74)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) return true;
    }
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_scan_token(69)) return true;
    if (jj_3R_18()) return true;
    if (jj_scan_token(70)) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_scan_token(72)) return true;
    if (jj_3R_18()) return true;
    if (jj_scan_token(72)) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_3R_48()) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_3R_140()) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_scan_token(65)) return true;
    if (jj_3R_61()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_scan_token(FAC)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_18()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_scan_token(FUNCTION_PREFIX)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_3R_85()) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_scan_token(ADDITIONSYMBOL)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    if (jj_scan_token(63)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    }
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_scan_token(STRUCTURE)) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_3R_113()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_114()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_121() {
    if (jj_3R_29()) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3R_125() {
    if (jj_scan_token(65)) return true;
    if (jj_3R_18()) return true;
    if (jj_scan_token(63)) return true;
    if (jj_3R_18()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_scan_token(65)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(63)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(63)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_31()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_scan_token(65)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(63)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(63)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_3R_34()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_35()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_scan_token(71)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_scan_token(INVERSE)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_3R_120()) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_scan_token(69)) return true;
    if (jj_3R_18()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_119()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(70)) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    }
    }
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_3R_60()) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_3R_59()) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_3R_57()) return true;
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_scan_token(TRANSPOSE)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_3R_56()) return true;
    return false;
  }

  final private boolean jj_3R_141() {
    if (jj_scan_token(63)) return true;
    if (jj_3R_18()) return true;
    if (jj_scan_token(63)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_134() {
    if (jj_scan_token(63)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_scan_token(DOTS)) return true;
    return false;
  }

  final private boolean jj_3R_138() {
    if (jj_scan_token(63)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    if (jj_3R_18()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_23()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_21() {
    if (jj_3R_29()) return true;
    return false;
  }

  final private boolean jj_3R_128() {
    if (jj_scan_token(65)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(63)) return true;
    if (jj_3R_18()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_141()) jj_scanpos = xsp;
    if (jj_scan_token(66)) return true;
    return false;
  }

  final private boolean jj_3R_135() {
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_140() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_14() {
    if (jj_3R_18()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_138()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_133() {
    if (jj_scan_token(VARS)) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(63)) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_scan_token(63)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    return false;
  }

  public fsParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[50];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0xfff01000,0x380,0x380,0xfff01000,0x1000,0x4000,0x20000,0x0,0xfff00000,0x40000,0xa00000,0xfff00000,0xff100000,0x0,0x0,0x0,0x0,0x0,0x38000000,0xf8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3000000,0x0,0x0,0x0,0x0,0x0,0xff400000,0x0,0x0,0x400000,0x400000,0x400000,0xe00000,0x0,0x0,0x0,0xff000000,0x400000,0x0,0x400000,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x12f7c7fb,0x80000000,0x80000000,0x12f7c7fb,0x0,0x0,0x0,0x0,0x12f7c7fb,0x0,0x0,0x12f7c7fb,0x7fb,0x0,0x0,0x0,0x0,0x18,0x0,0x303,0x4,0x80000000,0x0,0x4,0x80000000,0x0,0x80000000,0xe0,0x0,0x80000000,0x0,0x80000000,0x80000000,0x80000000,0x13f607ff,0x0,0x0,0x1201c000,0x1201c000,0x1201c000,0x1201c000,0x10040000,0x10040000,0x10040000,0x7ff,0x12f60000,0x0,0x12000000,0xe60000,0xf60000,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x122,0x0,0x0,0x122,0x0,0x0,0x0,0x1,0x122,0x0,0x0,0x122,0x0,0x2a2,0x2a2,0x2,0x2,0x0,0x0,0x0,0x0,0x4,0x2,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x2a0,0x122,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[3];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public fsParser(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new fsParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public fsParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new fsParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public fsParser(fsParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(fsParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[75];
    for (int i = 0; i < 75; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 50; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 75; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
