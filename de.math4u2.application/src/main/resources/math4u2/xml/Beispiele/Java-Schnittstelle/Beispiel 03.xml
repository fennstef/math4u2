<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE math4u2 PUBLIC "-//FH Augsburg//DTD Math4u2 V2.2//DE" "http://www.math4u2.de/xml/dtd/math4u2_V2_2DTD.dtd">
<math4u2>
	<head>
		<Lektion_nur_in_math4u2_Version_2.2_ausfuehrbar/>
		<version>2.2</version>
		<module id="main" class="ShowMeGraph"/>
		<define>
			<function>
				<name>myFunc</name>
				<result-type>ScalarType</result-type>
				<arguments>
					<argument type="ScalarType" name="x"/>
					<argument type="ScalarType" name="limit"/>
					<argument type="UserFunction" name="f"/>
				</arguments>				
				<method><![CDATA[
					public Object eval(Object[] args) throws MathException{
						//Parameter holen
						int k=0;
						double x = ((Result) args[k++]).getScalar();
						double limit = ((Result) args[k++]).getScalar();
						UserFunction f = ((UserFunction) args[k++]);				
						//Variable für das Ergebniss
						double result = 0;						
				
						//Berechnung des Funktionswertes
				
						//Parameterliste für Funktionsaufruf von f vorbereiten
						Object[] x2 = new Object[]{args[0]};
				
						//f berechnen und speichern
						double y = ((Result)f.eval(x2)).getScalar();
				
						//Berechnung wie zuvor
						if(Math.abs(y)<limit){
							result = 0.0;
						}else{
							result = y;
						}
						
						//Ergebnisrückgabe
						return new ScalarDoubleResult(result);
					}
				]]></method>				
			</function>
		</define>
	</head>
	<body>
		<location>/Beispiele/Java-Schnittstelle</location>
		<title>Beispiel 03</title>
		<step>
			<title>Beispiel 3: Funktion, die als Parameter eine andere Funktion benutzt</title>
			<description>
XML-Lektion hierzu:
<code><![CDATA[
<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE math4u2 PUBLIC "-//FH Augsburg//DTD Math4u2 V2.2//DE" "http://www.math4u2.de/xml/dtd/math4u2_V2_2DTD.dtd">
<math4u2>
	<head>
		<Lektion_nur_in_math4u2_Version_2.2_ausfuehrbar/>
		<version>2.2</version>
		<module id="main" class="ShowMeGraph"/>
		<define>
			<function>
				<name>myFunc</name>
				<result-type>ScalarType</result-type>
				<arguments>
					<argument type="ScalarType" name="x"/>
					<argument type="ScalarType" name="limit"/>
					<argument type="UserFunction" name="f"/>
				</arguments>				
				<method><![CDATA[
					public Object eval(Object[] args) throws MathException{
						//Parameter holen
						int k=0;
						double x = ((Result) args[k++]).getScalar();
						double limit = ((Result) args[k++]).getScalar();
						UserFunction f = ((UserFunction) args[k++]);				
						//Variable für das Ergebniss
						double result = 0;						

						//Berechnung des Funktionswertes
				
						//Parameterliste für Funktionsaufruf von f vorbereiten
						Object[] x2 = new Object[]{args[0]};
				
						//f berechnen und speichern
						double y = ((Result)f.eval(x2)).getScalar();
				
						//Berechnung wie zuvor
						if(Math.abs(y)<limit){
							result = 0.0;
						}else{
							result = y;
						}
						
						//Ergebnisrückgabe
						return new ScalarDoubleResult(result);
					}
				]]>]]&gt;<![CDATA[</method>				
			</function>
		</define>
	</head>
	<body>
		<location>/Beispiele/Java-Schnittstelle</location>
		<title>03 drittes Beispiel</title>
		<step>
			<seq>
				<script>
					newObject(def=a:=0.3; select=true; min=0; max=1);
					newObject(def=g(x):=cos(x));
					newObject(def=f(x) := myFunc(x,a, g.funktion); target=da;);
				</script>
			</seq>
		</step>
	</body>
</math4u2>
								
]]></code>				
			</description>
			<seq>
				<script>
					newObject(def=a:=0.3; select=true; min=0; max=1);
					newObject(def=g(x):=cos(x));
					newObject(def=f(x) := myFunc(x,a, g.funktion); target=da;);
				</script>
			</seq>
		</step>
	</body>
</math4u2>
