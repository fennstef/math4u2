/* Generated By:JJTree: Do not edit this line. ASTUndefinedVector.java */

package math4u2.parser.formulaold.parserNodes;

import math4u2.view.layout.IndexLayout;
import math4u2.view.formula.*;
import math4u2.parser.formulaold.*;
import math4u2.view.formula.AtomicBox;
import math4u2.view.formula.FormulaRenderContext;
/**
 * Klasse für unbestimmte Vektoren z.B. vektor({v[1],v[2],...,v[n]});
 * 
 * @author Christoph Beckmann
 */

public class ASTUndefinedVector extends SimpleNode {

    public static final String VERTICAL_ELLIPSIS = "\u22ee";

    public static final String HORIZONTAL_ELLIPSIS = "\u22ef"; //"\u2026"

    private int maxDim = 4;

    public ASTUndefinedVector(int id) {
        super(id);
    }

    public ASTUndefinedVector(fsParser p, int id) {
        super(p, id);
    }

    public void setName(String symbol) {
        super.symbol = symbol;
    }

    /*
     * (non-Javadoc)
     * 
     * @see math4u2.view.parser.SimpleNode#bakeComponents(math4u2.view.formula.AtomicBox)
     */
    public void bakeComponents(AtomicBox ab) {

        String var = ((SimpleNode) jjtGetChild(1)).symbol;
        int dim;
        boolean dimTooBig = false;
        String sDim = ((SimpleNode) jjtGetChild(0)).getSymbol();
        String pointAlignment;
        try {
            dim = Integer.parseInt(sDim);
        } catch (NumberFormatException e) {
            dim = maxDim;
            dimTooBig = true;
        }
        if (dim > maxDim) {
            dim = maxDim;
            dimTooBig = true;
        }
        
        FormulaRenderContext frc = ab.getRenderContext();
        GridBox gb;
        if (symbol.equals("<vektor(")) {
            gb = new GridBox(frc, 1, dim);
            pointAlignment = VERTICAL_ELLIPSIS;
        } else {
            gb = new GridBox(frc, dim, 1);
            pointAlignment = HORIZONTAL_ELLIPSIS;
        }
        AtomicBox[] myVector = new AtomicBox[dim];
        IndexedBox ib;
        for (int i = 0; i < dim - 1; i++) {
            ib = new IndexedBox(frc);
            ib.add(new OrdBox(frc, var), IndexLayout.CENTER);
            ib.add(new OrdBox(frc, Integer.toString(i + 1)),
                    IndexLayout.RIGHT_BOTTOM);
            myVector[i] = ib;

        }
        ib = new IndexedBox(frc);
        ib.add(new OrdBox(frc, var), IndexLayout.CENTER);
        ib.add(new OrdBox(frc, sDim), IndexLayout.RIGHT_BOTTOM);
        myVector[dim - 1] = ib;
        if (dimTooBig) {
            myVector[maxDim - 2] = new OpBox(frc, pointAlignment);
        }
        for (int i = 0; i < myVector.length; i++) {
            gb.add(myVector[i]);
        }
        BracketedBox bb = new BracketedBox(frc);
        bb.add(gb);
        ab.add(bb);

    }
}