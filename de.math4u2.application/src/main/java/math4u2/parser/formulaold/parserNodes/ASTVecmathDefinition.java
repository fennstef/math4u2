package math4u2.parser.formulaold.parserNodes;

import math4u2.view.formula.*;
import math4u2.parser.formulaold.*;
import math4u2.view.formula.AtomicBox;
import math4u2.view.formula.FormulaRenderContext;
/* Generated By:JJTree: Do not edit this line. ASTVecmathDefinition.java */

/**
 * Klasse für Vektor- und Matrizenwerte
 * 
 * @author Christoph Beckmann
 */

public class ASTVecmathDefinition extends SimpleNode {
    public ASTVecmathDefinition(int id) {
        super(id);
    }

    public ASTVecmathDefinition(fsParser p, int id) {
        super(p, id);
    }

    public void setName(String symbol) {
        super.symbol = symbol;
    }

    /*
     * (non-Javadoc)
     * 
     * @see math4u2.view.parser.SimpleNode#bakeComponents(math4u2.view.parser.Node)
     */
    public void bakeComponents(AtomicBox ab) {
    	FormulaRenderContext frc = ab.getRenderContext();
        BracketedBox bb = new BracketedBox(frc);
        int noCols = 0;
        int noRows = 0;
        if (symbol.equals("matrix")) {
            noRows = jjtGetNumChildren();
            noCols = jjtGetChild(0).jjtGetNumChildren();
        } else if (symbol.equals("vektor")) {
            noRows = jjtGetChild(0).jjtGetNumChildren();
            noCols = 1;
        } else if (symbol.equals("dualvektor")) {
            noRows = 1;
            noCols = jjtGetChild(0).jjtGetNumChildren();
        }
        GridBox gb = new GridBox(frc, noCols, noRows);
        for (int i = 0; i < children.length; i++) {
            jjtGetChild(i).bakeComponents(gb);
        }
        bb.add(gb);
        ab.add(bb);
    }

}