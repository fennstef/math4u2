package math4u2.parser.formulaold.parserNodes;

import math4u2.view.formula.*;
import math4u2.view.layout.IndexLayout;
import math4u2.parser.formulaold.*;
import math4u2.view.formula.AtomicBox;
/* Generated By:JJTree: Do not edit this line. ASTSpecialFunction.java */

/**
 * Klasse für sum, prod und int
 * 
 * @author Christoph Beckmann
 */

public class ASTSpecialFunction extends SimpleNode {
    public ASTSpecialFunction(int id) {
        super(id);
    }

    public ASTSpecialFunction(fsParser p, int id) {
        super(p, id);
    }

    public void setName(String symbol) {
        super.symbol = symbol;
    }

    /**
     * Baut nur die Components die für den Head der Funktion benötigt werden
     * 
     * @param ab
     */
    public void bakeHead(AtomicBox ab) {
        IndexedBox ib = new IndexedBox(ab.getRenderContext());
        ib.add(new OpBox(ab.getRenderContext(), symbol), IndexLayout.CENTER);
        ContainerBox cbDown = new ContainerBox(ab.getRenderContext());
        ContainerBox cbUp = new ContainerBox(ab.getRenderContext());
        if (symbol.equals("sum") || symbol.equals("prod")) {
            jjtGetChild(0).bakeComponents(cbDown);
            cbDown.add(new RelBox(ab.getRenderContext(), "="));
            jjtGetChild(1).bakeComponents(cbDown);
            jjtGetChild(2).bakeComponents(cbUp);
            ib.add(cbUp, IndexLayout.TOP);
            ib.add(cbDown, IndexLayout.BOTTOM);
            ab.add(ib);
        } else if (symbol.equals("int")) {
            jjtGetChild(1).bakeComponents(cbDown);
            jjtGetChild(2).bakeComponents(cbUp);
            ib.add(cbUp, IndexLayout.TOP);
            ib.add(cbDown, IndexLayout.BOTTOM);
            ab.add(ib);
        }
    }

    /**
     * Baut nur die Components die für den Body der Funktion benötigt werden
     * 
     * @param ab
     */
    public void bakeBody(AtomicBox ab) {
        jjtGetChild(3).bakeComponents(ab);
        if (symbol.equals("int")) {
            //Schlussterm d/dx
            InnerBox div = new InnerBox(ab.getRenderContext());
            ContainerBox c = new ContainerBox(ab.getRenderContext());
            c.add(new OrdBox(ab.getRenderContext(), "d"));
            div.add(c);
            c = new ContainerBox(ab.getRenderContext());
            c.add(new OrdBox(ab.getRenderContext(), "d"));
            jjtGetChild(0).bakeComponents(c);
            div.add(c);
            ab.add(div);
        }
    }

    /*
     * (non-Javadoc)
     * 
     * @see math4u2.view.parser.SimpleNode#bakeComponents(math4u2.view.parser.Node)
     */
    public void bakeComponents(AtomicBox ab) {
        bakeHead(ab);
        bakeBody(ab);
    }

}