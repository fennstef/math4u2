package math4u2.parser.formulaold.parserNodes;

import math4u2.parser.formulaold.*;
import math4u2.view.formula.AtomicBox;
/* Generated By:JJTree: Do not edit this line. SimpleNode.java */

/**
 * Die Klasse implementiert die wichtigsten Funktionen für den ParsBaum und ist
 * Superklasse aller AST-Klassen in math4u2.parser.formular.parserNodes.
 * 
 * @author Christoph Beckmann
 */

public abstract class SimpleNode implements Node {
    protected Node parent;

    protected Node[] children;

    protected int id;

    protected fsParser parser;

    protected String symbol="";

    public SimpleNode(int i) {
        id = i;
    }

    public SimpleNode(fsParser p, int i) {
        this(i);
        parser = p;
    }
    
    public int getId(){
        return id;
    }

    public String getSymbol() {
        return symbol;
    }

    public void jjtOpen() {
    }

    public void jjtClose() {
    }

    public void jjtSetParent(Node n) {
        parent = n;
    }

    public Node jjtGetParent() {
        return parent;
    }

    public void jjtAddChild(Node n, int i) {
        if (children == null) {
            children = new Node[i + 1];
        } else if (i >= children.length) {
            Node c[] = new Node[i + 1];
            System.arraycopy(children, 0, c, 0, children.length);
            children = c;
        }
        children[i] = n;
    }

    public Node jjtGetChild(int i) {
        return children[i];
    }

    public int jjtGetNumChildren() {
        return (children == null) ? 0 : children.length;
    }

    /*
     * You can override these two methods in subclasses of SimpleNode to
     * customize the way the node appears when the tree is dumped. If your
     * output uses more than one line you should override toString(String),
     * otherwise overriding toString() is probably all you need to do.
     */

    public String toString() {
        return fsParserTreeConstants.jjtNodeName[id] + " Symbol: " + symbol;
    }

    public String toString(String prefix) {
        return prefix + toString();
    }

    /*
     * Override this method if you want to customize how the node dumps out its
     * children.
     */

    public void dump(String prefix) {
        System.out.println(toString(prefix));
        if (children != null) {
            for (int i = 0; i < children.length; ++i) {
                SimpleNode n = (SimpleNode) children[i];
                if (n != null) {
                    n.dump(prefix + " ");
                }
            }
        }
    }

    public abstract void bakeComponents(AtomicBox ab);

}

