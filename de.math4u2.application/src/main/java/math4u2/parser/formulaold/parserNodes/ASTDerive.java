/* Generated By:JJTree: Do not edit this line. ASTDerive.java */

package math4u2.parser.formulaold.parserNodes;

import math4u2.view.formula.*;
import math4u2.parser.formulaold.*;
import math4u2.view.formula.AtomicBox;
/**
 * Klasse für Ableitungen.
 * 
 * @author Christoph Beckmann
 *  
 */

public class ASTDerive extends SimpleNode {
    public ASTDerive(int id) {
        super(id);
    }

    public ASTDerive(fsParser p, int id) {
        super(p, id);
    }

    public void setName(String symbol) {
        super.symbol = symbol;
    }

    /*
     * (non-Javadoc)
     * 
     * @see math4u2.view.parser.SimpleNode#bakeComponents(math4u2.view.formula.AtomicBox)
     */
    public void bakeComponents(AtomicBox ab) {
        int dimension = Integer.parseInt(symbol);
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < dimension; i++) {
            sb.append("'");
        }
        if (jjtGetChild(0) instanceof ASTNormalFunction) {
            ((SimpleNode) (jjtGetChild(0).jjtGetChild(0))).symbol += sb
                    .toString();
            jjtGetChild(0).bakeComponents(ab);
        } else {
            BracketedBox bb = new BracketedBox(ab.getRenderContext());
            jjtGetChild(0).bakeComponents(bb);
            ab.add(bb);
            ab.add(new OrdBox(ab.getRenderContext(), sb.toString()));
        }

    }

}