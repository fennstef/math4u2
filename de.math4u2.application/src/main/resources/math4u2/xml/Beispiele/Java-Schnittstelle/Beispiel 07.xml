<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE math4u2 PUBLIC "-//FH Augsburg//DTD Math4u2 V2.2//DE" "http://www.math4u2.de/xml/dtd/math4u2_V2_2DTD.dtd">
<math4u2>
	<head>
		<Lektion_nur_in_math4u2_Version_2.2_ausfuehrbar/>
		<version>2.2</version>
		<module id="main" class="ShowMeGraph"/>
		<define>
	<function>
		<name>paintMatrix</name>
		<with-graph/>
		<result-type>ScalarType</result-type>
		<arguments>
			<argument type="MatrixType" name="m"/>
		</arguments>
				<method><![CDATA[
					public Object eval(Object[] args) throws MathException{
						//Parameter holen
						double[][] m = ((Result) args[0]).getMatrix();
						//Mattrix im Cache speichern
						cache = m;
						//beliebigen Wert zurück liefern
						return new ScalarDoubleResult(0.0);
					}//eval
				]]></method>
				<method><![CDATA[
					public int[] convert(double[] point, DrawAreaInterface da){
						//Koordinaten in Pixel umrechnen
						int[] result = new int[2];
						result[0]=da.xCoordToPix(point[0]);
						result[1]=da.yCoordToPix(point[1]);
						return result;
					}//convert
				]]></method>							
				<method><![CDATA[
								public void paint(Graphics2D g, DrawAreaInterface da){
									//Matrix holen
									double[][] matrix = (double[][]) cache;
									int dim = matrix.length;
							
									//minimalen und maximalen Wert in der Matrix ermitteln
									double min=0,max=0;
									for(int i=0; i<matrix.length; i++){
										for(int j=0; j<matrix[i].length; j++){
											if(matrix[i][j]<min) min = matrix[i][j];
											if(matrix[i][j]>max) max = matrix[i][j];	
										}//for j
									}//for i
							
									//Jede Zelle zeichnen
									for(int i=0; i<matrix.length; i++){
										for(int j=0; j<matrix[i].length; j++){
											//Wert der Zelle relativ zu min/max berechnen
											//Spezialfälle: 0 falls matrix[i][j]==min
											//				1 falls matrix[i][j]==max
											float b = (float) (matrix[i][j]-min)/(max-min);
							
											//Farbton (das H im HSB Farbmodell) der aktuellen Farbe
											//berechnen
											Color color = getColor();
											float h = Color.RGBtoHSB(color.getRed(), color.getGreen(), color.getBlue(),null)[0];
											
											//Farbe holen, mit gleichen Farbton h und 
											//Sättigung und Helligkeit mit Wert b
											g.setColor( Color.getHSBColor(h, b, b));
							
											//linke untere Ecke in Pixel umrechnen
											int[] p1 = convert(new double[]{(double)j,(double)(dim-i)},da);
											//rechte obere Ecke in Pixel umrechnen				
											int[] p2 = convert(new double[]{(double)(j+1),(double)(dim-i+1)},da);
							
											//gefülltes Viereck zeichnen
											g.fillRect(p1[0], p1[1], p2[0]-p1[0], p1[1]-p2[1]);
											g.drawRect(p1[0], p1[1], p2[0]-p1[0], p1[1]-p2[1]);
										}//for j
									}//for i
								}//paint
				]]></method>			
			</function>
		</define>
	</head>
	<body>
		<location>/Beispiele/Java-Schnittstelle</location>
		<title>Beispiel 07</title>
		<step>
			<title>Beispiel 7: Graphische Darstellung erstellen</title>
			<description>
Xml-Lektion hierzu:
<code><![CDATA[
<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE math4u2 PUBLIC "-//FH Augsburg//DTD Math4u2 V2.2//DE" "http://www.math4u2.de/xml/dtd/math4u2_V2_2DTD.dtd">
<math4u2>
	<head>
		<Lektion_nur_in_math4u2_Version_2.2_ausfuehrbar/>
		<version>2.2</version>
		<module id="main" class="ShowMeGraph"/>
		<define>
			<function>
				<name>paintMatrix</name>
				<with-graph/>
				<result-type>ScalarType</result-type>
				<arguments>
					<argument type="MatrixType" name="m"/>
				</arguments>
				<method><![CDATA[
public Object eval(Object[] args) throws MathException{
	//Parameter holen
	double[][] m = ((Result) args[0]).getMatrix();
	//Mattrix im Cache speichern
	cache = m;
	//beliebigen Wert zurück liefern
	return new ScalarDoubleResult(0.0);
}//eval
				]]>]]&gt;<![CDATA[</method>
				<method><![CDATA[
public int[] convert(double[] point, DrawAreaInterface da){
	//Koordinaten in Pixel umrechnen
	int[] result = new int[2];
	result[0]=da.xCoordToPix(point[0]);
	result[1]=da.yCoordToPix(point[1]);
	return result;
}//convert
				]]>]]&gt;<![CDATA[</method>						
				<method><![CDATA[
public void paint(Graphics2D g, DrawAreaInterface da){
	//Matrix holen
	double[][] matrix = (double[][]) cache;
	int dim = matrix.length;

	//minimalen und maximalen Wert in der Matrix ermitteln
	double min=0,max=0;
	for(int i=0; i<matrix.length; i++){
		for(int j=0; j<matrix[i].length; j++){
			if(matrix[i][j]<min) min = matrix[i][j];
			if(matrix[i][j]>max) max = matrix[i][j];	
		}//for j
	}//for i

	//Jede Zelle zeichnen
	for(int i=0; i<matrix.length; i++){
		for(int j=0; j<matrix[i].length; j++){
			//Wert der Zelle relativ zu min/max berechnen
			//Spezialfälle: 0 falls matrix[i][j]==min
			//				1 falls matrix[i][j]==max
			float b = (float) (matrix[i][j]-min)/(max-min);
			
			//Farbton (das H im HSB Farbmodell) der aktuellen Farbe
			//berechnen
			Color color = getColor();
			float h = Color.RGBtoHSB(color.getRed(), color.getGreen(), color.getBlue(),null)[0];
				
			//Farbe holen, mit gleichen Farbton h und 
			//Sättigung und Helligkeit mit Wert b
			g.setColor( Color.getHSBColor(h, b, b));
			
			//linke untere Ecke in Pixel umrechnen
			int[] p1 = convert(new double[]{(double)j,(double)(dim-i)},da);
			//rechte obere Ecke in Pixel umrechnen				
			int[] p2 = convert(new double[]{(double)(j+1),(double)(dim-i+1)},da);

			//gefülltes Viereck zeichnen
			g.fillRect(p1[0], p1[1], p2[0]-p1[0], p1[1]-p2[1]);
			g.drawRect(p1[0], p1[1], p2[0]-p1[0], p1[1]-p2[1]);
		}//for j
	}//for i
}//paint
				]]>]]&gt;<![CDATA[</method>			
			</function>
		</define>
	</head>
	<body>
		<location>/Beispiele/Java-Schnittstelle</location>
		<title>Beispiel 07</title>
		<step>
			<title>Beispiel 7: Graphische Darstellung erstellen</title>
			<seq>
				<script>
					da.coordinateSystem(xMin=-20;xMax=60;yMin=-20;yMax=60;);
					da.zoom1To1(active=true);
					newObject(def=m:=matrix(i,40,j,40,sin(i)*cos(j)*i*j*(i-j)));
					newObject(def=pm:=paintMatrix(m);target=da;color=green;);
				</script>
			</seq>
		</step>
	</body>
</math4u2>
]]></code>			
			</description>
			<seq>
				<script>
					da.coordinateSystem(xMin=-20;xMax=60;yMin=-20;yMax=60;);
					da.zoom1To1(active=true);
					newObject(def=m:=matrix(i,40,j,40,sin(i)*cos(j)*i*j*(i-j)));
					newObject(def=pm:=paintMatrix(m);target=da;color=green;);
				</script>
			</seq>
		</step>
	</body>
</math4u2>