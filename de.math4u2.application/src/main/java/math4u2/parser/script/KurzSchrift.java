/* Generated By:JavaCC: Do not edit this line. KurzSchrift.java */
package math4u2.parser.script;

import math4u2.exercises.scripting.*;
import math4u2.util.exception.parser.script.ParseException;
import math4u2.util.exception.parser.script.Token;
import math4u2.controller.*;

import java.io.StringReader;
import java.util.*;

public class KurzSchrift implements KurzSchriftConstants {

        private final static boolean DEBUG = false;

        private KurzSchrift instance;

        private Broker broker;

        private List actions;

        private String classStr;

        private String methodStr;

        private HashMap params= new HashMap();

        private boolean withActionContainer = true;

        public void setBroker(Broker broker){
                this.broker=broker;
        }

        /**
	 * Methode, die Abkürzungen initiallisiert
	 * 
	 * @param longword
	 *            Schlüsselwort z.B. visible
	 * @param shortkey
	 *            Abkürzung z.B. v
	 * @param params
	 *            Parameterliste, die initialisiert werden soll
	 */
        public void assignShortKey(String longword, String shortkey,
                        HashMap params) {
                if (params.get(longword) == null)
                        params.put(longword, params.get(shortkey));
        } //assignShortKey

        public List parseScript()
                        throws ParseException {
                withActionContainer = true;
                actions = new LinkedList();
                Methodenliste();
                this.broker = null;
                return actions;
        } //parseScript

        public List parseScriptWithoutActionComponents() throws ParseException {
                withActionContainer = false;
                actions = new LinkedList();
                Methodenliste();
                this.broker = null;
                return actions;
        } //parseScriptWithoutActionComponents

        private void buildActionOrAnimation() {

                if(!withActionContainer){
                        buildActionWithoutContainer();
                }else{

                if (classStr == null)
                        classStr = "main";
                if (classStr.equals("main") && methodStr.equals("animate")) {
                        buildAnimation();
                } else {
                        buildAction();
                }
                }
                //werte neu initialisieren
                clearForNextCall();
        } //buildActionOrAnimation

        private void buildAction() {
                LinkedList pa = new LinkedList();
                pa.add(new EActionParam(params));
                EActionCall eac = null;
                if(classStr.equals("main") && methodStr.equals("break")){
                	eac = new EActionBreakCall(classStr, methodStr, pa);
                }else{
                	eac = new EActionCall(classStr, methodStr, pa);
                }
                pa = null;
                actions.add(eac);
        } //buildAction

        private void buildActionWithoutContainer(){
                Object[] parts = new Object[]{classStr,methodStr,params};
                actions.add(parts);
        }//buildActionWithoutContainer

        private void buildAnimation() {
                assignShortKey("name", "n", params);
                assignShortKey("setmethod", "set", params);
                assignShortKey("getmethod", "get", params);
                assignShortKey("timefunction", "t", params);

                String getMethod= "getParameter";
                if (params.get("getmethod") != null)
                        getMethod= (String) params.get("getmethod");

                String setMethod= "setParameter";
                if (params.get("setmethod") != null)
                        setMethod= (String) params.get("setmethod");

                String attributeName= (String) params.get("name");
                if (attributeName == null)
                        throw new NullPointerException("Parametername mu\u00df definiert sein in 'animate'.");

                String timeFunction= (String) params.get("timefunction");

                EActionAnimation eaa=
                        new EActionAnimation(classStr, getMethod, setMethod, attributeName, timeFunction, broker);
                float begin= 0f, end= Float.NaN, from= Float.NaN, to= Float.NaN;
                String fromStr= (String) params.get("from");
                if (fromStr != null)
                        from= Float.parseFloat(fromStr);
                String toStr= (String) params.get("to");
                if (toStr == null)
                        throw new NullPointerException("Zielwert 'to' mu\u00df definiert sein in 'animate'.");
                to= Float.parseFloat(toStr);
                String beginStr= (String) params.get("begin");
                if (beginStr != null)
                        begin= Float.parseFloat(beginStr);
                String endStr= (String) params.get("end");
                if (endStr != null)
                        end= Float.parseFloat(endStr);
                eaa.setBegin(begin);
                eaa.setEnd(end);
                eaa.setFrom(from);
                eaa.setTo(to);

                actions.add(eaa);
        } //buildAnimation

        /**
     * Initialisiert alle Werte neu, damit keine Werte überschrieben werden.
     *
     */
        private void clearForNextCall() {
                classStr= null;
                methodStr= null;
                params= new HashMap();
        }

  final public void Methodenliste() throws ParseException {
        String s;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(SPACE);
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      Methodenaufruf();
      jj_consume_token(SEMICOLON);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_3;
        }
        jj_consume_token(SPACE);
      }
                        if (DEBUG)
                                System.out.println("ausgabe " + classStr + "." + methodStr + "(" + params + ")");

                        buildActionOrAnimation();
    }
    jj_consume_token(0);
  }

  final public void Methodenaufruf() throws ParseException {
        String s;
        String temp1= "";
        String temp2= "";
        String klasse= "";
        String methode= "";
    s = Name();
                temp1= s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      s = Name();
                        temp2 += s;
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      jj_consume_token(SPACE);
    }
    Parameterliste();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_5;
      }
      jj_consume_token(SPACE);
    }
                if (temp2.equals("")) {
                        methodStr= temp1;
                } else {
                        classStr= temp1;
                        methodStr= temp2;
                }
  }

  final public void Parameterliste() throws ParseException {
    jj_consume_token(LPAREN);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_6;
      }
      jj_consume_token(SPACE);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      Parameter();
      label_7:
      while (true) {
        if (jj_2_1(10)) {
          ;
        } else {
          break label_7;
        }
        jj_consume_token(SEMICOLON);
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SPACE:
            ;
            break;
          default:
            jj_la1[7] = jj_gen;
            break label_8;
          }
          jj_consume_token(SPACE);
        }
        Parameter();
      }
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_9;
        }
        jj_consume_token(SPACE);
      }
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
  }

  final public void Parameter() throws ParseException {
        String key;
        String value;
    key = Key();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_10;
      }
      jj_consume_token(SPACE);
    }
    jj_consume_token(ISTGLEICH);
    value = Value();
                params.put(key, value);
  }

  final public String Key() throws ParseException {
        String s;
    s = Name();
                {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public String Value() throws ParseException {
        String s;
        String temp;
    s = Text();
                temp= s;
                {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public String Text() throws ParseException {
        String s;
        String temp= "";
        Token t;
        if (DEBUG)
                System.out.println("Text() start");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
    case DOT:
    case ISTGLEICH:
    case DEF:
    case SPACE:
    case ESCAPED_SC:
    case ID:
    case DESCRIPTION:
    case MATHS:
    case STRING_LITERAL:
      s = MatheString();
                                temp += s;
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_11;
        }
        s = Geklammert();
                                        temp += s;
      }
      break;
    case LPAREN:
      label_12:
      while (true) {
        s = Geklammert();
                                temp += s;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_12;
        }
      }
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if (DEBUG)
                        System.out.println("text: " + temp);
                {if (true) return temp;}
    throw new Error("Missing return statement in function");
  }

  final public String Geklammert() throws ParseException {
        String s;
        String temp;
        if (DEBUG)
                System.out.println("Geklammert() start");
    jj_consume_token(LPAREN);
                temp= "(";
    s = Text();
                temp += s;
    jj_consume_token(RPAREN);
                temp += ")";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
    case DOT:
    case ISTGLEICH:
    case DEF:
    case SPACE:
    case ESCAPED_SC:
    case ID:
    case DESCRIPTION:
    case MATHS:
    case STRING_LITERAL:
      s = MatheString();
                        temp += s;
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
                if (DEBUG)
                        System.out.println("Geklammert: " + temp);
                {if (true) return temp;}
    throw new Error("Missing return statement in function");
  }

  final public String MatheString() throws ParseException {
        String s;
        String temp= "";
        if (DEBUG)
                System.out.println("MatheString() start");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
    case DESCRIPTION:
    case STRING_LITERAL:
      s = Description();
                        temp= s;
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
        case DOT:
        case ISTGLEICH:
        case DEF:
        case SPACE:
        case ESCAPED_SC:
        case MATHS:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_13;
        }
        s = Trenner();
                                temp += s;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
        case DESCRIPTION:
        case STRING_LITERAL:
          s = Description();
                                        temp += s;
          break;
        default:
          jj_la1[17] = jj_gen;
          ;
        }
      }
                        if (DEBUG)
                                System.out.println("Mathestring: " + temp);
                        {if (true) return temp;}
      break;
    case COMMA:
    case DOT:
    case ISTGLEICH:
    case DEF:
    case SPACE:
    case ESCAPED_SC:
    case MATHS:
      label_14:
      while (true) {
        s = Trenner();
                                temp += s;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
        case DESCRIPTION:
        case STRING_LITERAL:
          s = Description();
                                        temp += s;
          break;
        default:
          jj_la1[18] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
        case DOT:
        case ISTGLEICH:
        case DEF:
        case SPACE:
        case ESCAPED_SC:
        case MATHS:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_14;
        }
      }
                        if (DEBUG)
                                System.out.println("Mathestring: " + temp);
                        {if (true) return temp;}
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String Description() throws ParseException {
        String temp= "";
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      t = jj_consume_token(ID);
                        temp += t.image;
      break;
    case DESCRIPTION:
      t = jj_consume_token(DESCRIPTION);
                        temp += t.image;
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
                        temp += t.image;
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return temp;}
    throw new Error("Missing return statement in function");
  }

  final public String Name() throws ParseException {
        String temp= "";
        Token t;
    label_15:
    while (true) {
      t = jj_consume_token(ID);
                        temp += t.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_15;
      }
    }
                {if (true) return temp;}
    throw new Error("Missing return statement in function");
  }

  final public String Trenner() throws ParseException {
        Token t;
        String s= "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      t = jj_consume_token(DOT);
                {if (true) return t.image;}
      break;
    case COMMA:
      t = jj_consume_token(COMMA);
                {if (true) return t.image;}
      break;
    case ISTGLEICH:
      t = jj_consume_token(ISTGLEICH);
                {if (true) return t.image;}
      break;
    case DEF:
      t = jj_consume_token(DEF);
                {if (true) return t.image;}
      break;
    case MATHS:
      t = jj_consume_token(MATHS);
                {if (true) return t.image;}
      break;
    case SPACE:
      t = jj_consume_token(SPACE);
                {if (true) return t.image;}
      break;
    case ESCAPED_SC:
      jj_consume_token(ESCAPED_SC);
                {if (true) return ";";}
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_3R_29() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_3R_29()) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_3R_29()) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_23() {
    Token xsp;
    if (jj_3R_26()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_26()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    }
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_3R_30()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_31()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_3R_37()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_scan_token(ESCAPED_SC)) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    Token xsp;
    if (jj_3R_21()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_21()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_3R_24()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_25()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_scan_token(SPACE)) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    if (jj_3R_17()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(16)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(ISTGLEICH)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(16)) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_scan_token(MATHS)) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    }
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_scan_token(DEF)) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_scan_token(DESCRIPTION)) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    Token xsp;
    if (jj_3R_32()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_32()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_3R_37()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_scan_token(ISTGLEICH)) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  public KurzSchriftTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[24];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x10000,0x80000,0x10000,0x2000,0x10000,0x10000,0x10000,0x10000,0x80000,0x10000,0x800,0x10000,0x200,0x200,0x7bf200,0x7bf000,0x23f000,0x580000,0x580000,0x23f000,0x7bf000,0x580000,0x80000,0x23f000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public KurzSchrift(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new KurzSchriftTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public KurzSchrift(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new KurzSchriftTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public KurzSchrift(KurzSchriftTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(KurzSchriftTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[23];
    for (int i = 0; i < 23; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 24; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 23; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

          //clearForNextCall

}
