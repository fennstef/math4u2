/* Generated By:JJTree&JavaCC: Do not edit this line. fsParserTokenManager.java */
package math4u2.parser.formulaold;
import java.util.*;
import math4u2.parser.formulaold.parserNodes.*;
import math4u2.controller.*;

public class fsParserTokenManager implements fsParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x25640000L) != 0L)
         {
            jjmatchedKind = 47;
            return 256;
         }
         if ((active0 & 0x450000000000L) != 0L)
            return 107;
         if ((active0 & 0x20042000000L) != 0L)
            return 256;
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 47;
            return 36;
         }
         if ((active0 & 0x8000L) != 0L)
            return 72;
         if ((active0 & 0x7000001000000000L) != 0L)
         {
            jjmatchedKind = 7;
            return 90;
         }
         if ((active0 & 0x180000L) != 0L)
         {
            jjmatchedKind = 47;
            return 10;
         }
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 47;
            return 54;
         }
         return -1;
      case 1:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return 89;
         }
         if ((active0 & 0x10000000000L) != 0L)
            return 110;
         if ((active0 & 0x40000000000L) != 0L)
            return 206;
         if ((active0 & 0x4000001000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x77fc0000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 1;
            return 256;
         }
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return 99;
         }
         if ((active0 & 0x400000000000L) != 0L)
            return 188;
         return -1;
      case 2:
         if ((active0 & 0x30300000L) != 0L)
            return 256;
         if ((active0 & 0x47cc0000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 2;
            return 256;
         }
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return 98;
         }
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return 88;
         }
         if ((active0 & 0x4000001000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 3:
         if ((active0 & 0x7800000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 3;
            return 256;
         }
         if ((active0 & 0x404c0000L) != 0L)
            return 256;
         if ((active0 & 0x4000001000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return 97;
         }
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return 87;
         }
         return -1;
      case 4:
         if ((active0 & 0x2000000L) != 0L)
            return 256;
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return 96;
         }
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return 86;
         }
         if ((active0 & 0x4000001000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x5800000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 4;
            return 256;
         }
         return -1;
      case 5:
         if ((active0 & 0x4800000L) != 0L)
            return 256;
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 5;
            return 256;
         }
         if ((active0 & 0x4000001000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return 95;
         }
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return 85;
         }
         return -1;
      case 6:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return 94;
         }
         if ((active0 & 0x1000000L) != 0L)
            return 256;
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return 84;
         }
         if ((active0 & 0x4000001000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return 93;
         }
         if ((active0 & 0x4000001000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return 92;
         }
         return -1;
      case 9:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return 91;
         }
         return -1;
      case 10:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return 84;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 38:
         return jjMoveStringLiteralDfa1_0(0x450000000000L);
      case 40:
         return jjStopAtPos(0, 52);
      case 41:
         jjmatchedKind = 53;
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L);
      case 44:
         return jjStopAtPos(0, 54);
      case 46:
         return jjStopAtPos(0, 51);
      case 47:
         return jjStartNfaWithStates_0(0, 15, 72);
      case 58:
         return jjMoveStringLiteralDfa1_0(0x2000000000000L);
      case 60:
         return jjMoveStringLiteralDfa1_0(0x7000001000000000L);
      case 91:
         return jjStopAtPos(0, 57);
      case 93:
         return jjStopAtPos(0, 58);
      case 94:
         return jjStopAtPos(0, 50);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 101:
         jjmatchedKind = 41;
         return jjMoveStringLiteralDfa1_0(0x42000000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x24000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x1400000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x180000L);
      case 123:
         return jjStopAtPos(0, 55);
      case 124:
         return jjStopAtPos(0, 59);
      case 125:
         return jjStopAtPos(0, 56);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 49);
         break;
      case 62:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000001000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000001000000000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000200000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x14040000L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000L);
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x42000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, 0L);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000401000000000L);
      case 99:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 29, 256);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000001000000L);
      case 103:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 28, 256);
         break;
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x40002000000L);
      case 109:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 20, 256);
         break;
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x440000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x4880000L);
      case 116:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 21, 256);
         break;
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 59:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(3, 42);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000004000000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L);
      case 100:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 256);
         break;
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L);
      case 111:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 256);
         break;
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 256);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 19, 256);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000001000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x10001000000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000400004000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000001000000000L);
      case 116:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 25, 256);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000000L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L);
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 23, 256);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000001000000000L);
      case 108:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 26, 256);
         break;
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000000L);
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000001000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 59:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(6, 40);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(6, 46);
         break;
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 24, 256);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000000L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000000L);
      case 120:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000001000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(7, 36);
         break;
      case 62:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(7, 60);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(7, 62);
         break;
      case 107:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(11, 61);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 256;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 256:
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAddTwoStates(38, 39);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAddTwoStates(38, 39);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAddTwoStates(38, 39);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 38)
                        kind = 38;
                     jjCheckNAddStates(0, 2);
                  }
                  else if ((0x7000000000000000L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                  }
                  else if ((0x2200000000L & l) != 0L)
                  {
                     if (kind > 16)
                        kind = 16;
                  }
                  else if ((0x280000000000L & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                  }
                  else if (curChar == 38)
                     jjAddStates(3, 32);
                  else if (curChar == 47)
                     jjAddStates(33, 34);
                  else if (curChar == 42)
                  {
                     if (kind > 12)
                        kind = 12;
                  }
                  if (curChar == 60)
                     jjCheckNAddStates(35, 37);
                  else if (curChar == 38)
                     jjAddStates(38, 40);
                  else if (curChar == 43)
                     jjstateSet[jjnewStateCnt++] = 5;
                  else if (curChar == 33)
                     jjCheckNAdd(0);
                  else if (curChar == 62)
                     jjCheckNAdd(0);
                  break;
               case 72:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(78, 79);
                  else if (curChar == 47)
                     jjCheckNAddStates(41, 43);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAddTwoStates(38, 39);
                  break;
               case 90:
               case 0:
                  if (curChar == 61 && kind > 7)
                     kind = 7;
                  break;
               case 2:
                  if (curChar == 33)
                     jjCheckNAdd(0);
                  break;
               case 3:
                  if ((0x7000000000000000L & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 4:
                  if ((0x280000000000L & l) != 0L && kind > 10)
                     kind = 10;
                  break;
               case 5:
                  if (curChar == 45 && kind > 10)
                     kind = 10;
                  break;
               case 6:
                  if (curChar == 43)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 42 && kind > 12)
                     kind = 12;
                  break;
               case 8:
                  if ((0x2200000000L & l) != 0L && kind > 16)
                     kind = 16;
                  break;
               case 55:
                  if (curChar == 38)
                     jjAddStates(38, 40);
                  break;
               case 56:
                  if (curChar == 59 && kind > 12)
                     kind = 12;
                  break;
               case 71:
                  if (curChar == 47)
                     jjAddStates(33, 34);
                  break;
               case 73:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(41, 43);
                  break;
               case 74:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 75:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 76:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(78, 79);
                  break;
               case 78:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(78, 79);
                  break;
               case 79:
                  if (curChar == 42)
                     jjAddStates(44, 45);
                  break;
               case 80:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(81, 79);
                  break;
               case 81:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(81, 79);
                  break;
               case 82:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               case 83:
                  if (curChar == 60)
                     jjCheckNAddStates(35, 37);
                  break;
               case 84:
                  if (curChar == 40 && kind > 35)
                     kind = 35;
                  break;
               case 101:
                  if (curChar == 38)
                     jjAddStates(3, 32);
                  break;
               case 103:
                  if (curChar == 59 && kind > 7)
                     kind = 7;
                  break;
               case 115:
                  if (curChar == 59 && kind > 10)
                     kind = 10;
                  break;
               case 127:
                  if (curChar == 59 && kind > 17)
                     kind = 17;
                  break;
               case 134:
                  if (curChar == 59 && kind > 43)
                     kind = 43;
                  break;
               case 247:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAddStates(0, 2);
                  break;
               case 248:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 249;
                  break;
               case 249:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAdd(250);
                  break;
               case 250:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddTwoStates(251, 250);
                  break;
               case 251:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAdd(251);
                  break;
               case 252:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAddTwoStates(253, 252);
                  break;
               case 253:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAdd(253);
                  break;
               case 254:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(46, 48);
                  break;
               case 255:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(248, 255);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 256:
               case 38:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAddTwoStates(38, 39);
                  break;
               case 206:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 118;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 207;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 205;
                  break;
               case 107:
                  if (curChar == 104)
                     jjAddStates(49, 50);
                  else if (curChar == 100)
                     jjAddStates(51, 52);
                  else if (curChar == 117)
                     jjAddStates(53, 54);
                  else if (curChar == 114)
                     jjAddStates(55, 56);
                  else if (curChar == 108)
                     jjAddStates(57, 58);
                  else if (curChar == 97)
                     jjAddStates(59, 60);
                  else if (curChar == 99)
                     jjAddStates(61, 63);
                  else if (curChar == 112)
                     jjAddStates(64, 65);
                  else if (curChar == 115)
                     jjAddStates(66, 69);
                  else if (curChar == 103)
                     jjCheckNAddTwoStates(194, 185);
                  else if (curChar == 110)
                     jjCheckNAddStates(70, 73);
                  else if (curChar == 80)
                     jjAddStates(74, 75);
                  else if (curChar == 79)
                     jjAddStates(76, 77);
                  else if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 170;
                  else if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 163;
                  else if (curChar == 88)
                     jjCheckNAdd(159);
                  else if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 157;
                  else if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 152;
                  else if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 148;
                  else if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 144;
                  else if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 140;
                  else if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 137;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 69;
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 59;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 110;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 106;
                  if (curChar == 108)
                     jjCheckNAddTwoStates(194, 185);
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 131;
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 128;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 63;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 124;
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 119;
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 188:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 126;
                  else if (curChar == 105)
                     jjCheckNAdd(103);
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 187;
                  else if (curChar == 101)
                     jjCheckNAdd(103);
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 190;
                  break;
               case 54:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAddTwoStates(38, 39);
                  }
                  if (curChar == 103)
                  {
                     if (kind > 27)
                        kind = 27;
                  }
                  else if (curChar == 110)
                  {
                     if (kind > 27)
                        kind = 27;
                  }
                  break;
               case 10:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAddTwoStates(38, 39);
                  }
                  if (curChar == 105)
                     jjCheckNAdd(9);
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAddTwoStates(38, 39);
                  }
                  if (curChar == 108)
                     jjCheckNAddTwoStates(9, 54);
                  else if (curChar == 97)
                     jjAddStates(78, 80);
                  else if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 36;
                  else if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 27;
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 21;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 15;
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 36:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAddTwoStates(38, 39);
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 90:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 99;
                  else if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 9:
                  if (curChar == 110 && kind > 27)
                     kind = 27;
                  break;
               case 11:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 115 && kind > 27)
                     kind = 27;
                  break;
               case 13:
               case 45:
                  if (curChar == 111)
                     jjCheckNAdd(12);
                  break;
               case 14:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
               case 49:
                  if (curChar == 97)
                     jjCheckNAdd(9);
                  break;
               case 16:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 120 && kind > 31)
                     kind = 31;
                  break;
               case 18:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 114 && kind > 31)
                     kind = 31;
                  break;
               case 24:
               case 29:
                  if (curChar == 111)
                     jjCheckNAdd(23);
                  break;
               case 25:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 107)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 30:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 107)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 37:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 40:
                  if (curChar == 97)
                     jjAddStates(78, 80);
                  break;
               case 41:
                  if (curChar == 105)
                     jjCheckNAdd(9);
                  break;
               case 42:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 46:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 50:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 108)
                     jjCheckNAddTwoStates(9, 54);
                  break;
               case 57:
               case 61:
                  if (curChar == 116)
                     jjCheckNAdd(56);
                  break;
               case 58:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 62:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if (curChar == 115)
                     jjCheckNAdd(56);
                  break;
               case 66:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 73:
                  jjAddStates(41, 43);
                  break;
               case 78:
                  jjCheckNAddTwoStates(78, 79);
                  break;
               case 80:
               case 81:
                  jjCheckNAddTwoStates(81, 79);
                  break;
               case 85:
               case 91:
                  if (curChar == 114)
                     jjCheckNAdd(84);
                  break;
               case 86:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if (curChar == 107)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 92:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if (curChar == 107)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 102:
                  if (curChar == 118)
                     jjCheckNAdd(103);
                  break;
               case 104:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 105:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 108:
                  if (curChar == 110)
                     jjCheckNAdd(103);
                  break;
               case 109:
               case 189:
                  if (curChar == 105)
                     jjCheckNAdd(108);
                  break;
               case 110:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 111:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 112:
               case 222:
                  if (curChar == 114)
                     jjCheckNAdd(103);
                  break;
               case 113:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 114:
                  if (curChar == 110)
                     jjCheckNAdd(115);
                  break;
               case 116:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 117:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 119:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 121:
                  if (curChar == 115)
                     jjCheckNAdd(115);
                  break;
               case 122:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 123:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 124:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 125:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 126:
                  if (curChar == 116)
                     jjCheckNAdd(127);
                  break;
               case 128:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 129:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 130:
                  if (curChar == 103)
                     jjCheckNAdd(127);
                  break;
               case 131:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 132:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 133:
                  if (curChar == 97)
                     jjCheckNAdd(134);
                  break;
               case 135:
                  if (curChar == 104)
                     jjCheckNAdd(133);
                  break;
               case 136:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 137:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 138:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 139:
               case 146:
               case 150:
                  if (curChar == 116)
                     jjCheckNAdd(133);
                  break;
               case 140:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 141:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
               case 161:
                  if (curChar == 109)
                     jjCheckNAdd(133);
                  break;
               case 143:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 144:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 145:
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 147:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 148:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 149:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 151:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 152:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 153:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 154:
                  if (curChar == 100)
                     jjCheckNAdd(133);
                  break;
               case 155:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 156:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 157:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 158:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 159:
                  if (curChar == 105)
                     jjCheckNAdd(134);
                  break;
               case 160:
                  if (curChar == 88)
                     jjCheckNAdd(159);
                  break;
               case 162:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 161;
                  break;
               case 163:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 162;
                  break;
               case 164:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 163;
                  break;
               case 165:
                  if (curChar == 110)
                     jjCheckNAdd(134);
                  break;
               case 166:
               case 173:
                  if (curChar == 111)
                     jjCheckNAdd(165);
                  break;
               case 167:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 168:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 169:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 170:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 171:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 170;
                  break;
               case 172:
                  if (curChar == 79)
                     jjAddStates(76, 77);
                  break;
               case 174:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 173;
                  break;
               case 175:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 174;
                  break;
               case 176:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 175;
                  break;
               case 177:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 176;
                  break;
               case 178:
                  if (curChar == 103)
                     jjCheckNAdd(133);
                  break;
               case 179:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 178;
                  break;
               case 180:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 179;
                  break;
               case 181:
                  if (curChar == 80)
                     jjAddStates(74, 75);
                  break;
               case 182:
                  if (curChar == 104)
                     jjCheckNAdd(159);
                  break;
               case 183:
                  if (curChar == 115)
                     jjCheckNAdd(159);
                  break;
               case 184:
                  if (curChar == 110)
                     jjCheckNAddStates(70, 73);
                  break;
               case 185:
                  if (curChar == 101)
                     jjCheckNAdd(103);
                  break;
               case 186:
                  if (curChar == 98)
                     jjCheckNAdd(103);
                  break;
               case 187:
               case 197:
                  if (curChar == 117)
                     jjCheckNAdd(186);
                  break;
               case 190:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 189;
                  break;
               case 191:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 190;
                  break;
               case 192:
                  if (curChar == 105)
                     jjCheckNAdd(103);
                  break;
               case 193:
                  if (curChar == 108)
                     jjCheckNAddTwoStates(194, 185);
                  break;
               case 194:
                  if (curChar == 116)
                     jjCheckNAdd(103);
                  break;
               case 195:
                  if (curChar == 103)
                     jjCheckNAddTwoStates(194, 185);
                  break;
               case 196:
                  if (curChar == 115)
                     jjAddStates(66, 69);
                  break;
               case 198:
                  if (curChar == 112)
                     jjCheckNAdd(103);
                  break;
               case 199:
               case 214:
                  if (curChar == 117)
                     jjCheckNAdd(198);
                  break;
               case 200:
                  if (curChar == 112)
                     jjCheckNAdd(185);
                  break;
               case 201:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 200;
                  break;
               case 202:
                  if (curChar == 109)
                     jjCheckNAdd(103);
                  break;
               case 203:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 202;
                  break;
               case 204:
                  if (curChar == 112)
                     jjAddStates(64, 65);
                  break;
               case 205:
                  if (curChar == 114)
                     jjCheckNAdd(198);
                  break;
               case 207:
                  if (curChar == 111)
                     jjCheckNAdd(198);
                  break;
               case 208:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 207;
                  break;
               case 209:
                  if (curChar == 99)
                     jjAddStates(61, 63);
                  break;
               case 210:
                  if (curChar == 103)
                     jjCheckNAdd(103);
                  break;
               case 211:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 210;
                  break;
               case 212:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 211;
                  break;
               case 213:
                  if (curChar == 97)
                     jjCheckNAdd(198);
                  break;
               case 215:
                  if (curChar == 97)
                     jjAddStates(59, 60);
                  break;
               case 216:
                  if (curChar == 109)
                     jjCheckNAdd(198);
                  break;
               case 217:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 216;
                  break;
               case 218:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 217;
                  break;
               case 219:
                  if (curChar == 100)
                     jjCheckNAdd(103);
                  break;
               case 220:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 219;
                  break;
               case 221:
                  if (curChar == 108)
                     jjAddStates(57, 58);
                  break;
               case 223:
               case 225:
               case 228:
               case 230:
               case 233:
               case 235:
               case 238:
               case 240:
               case 243:
               case 245:
                  if (curChar == 114)
                     jjCheckNAdd(222);
                  break;
               case 224:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 223;
                  break;
               case 226:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 225;
                  break;
               case 227:
                  if (curChar == 114)
                     jjAddStates(55, 56);
                  break;
               case 229:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 228;
                  break;
               case 231:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 230;
                  break;
               case 232:
                  if (curChar == 117)
                     jjAddStates(53, 54);
                  break;
               case 234:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 233;
                  break;
               case 236:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 235;
                  break;
               case 237:
                  if (curChar == 100)
                     jjAddStates(51, 52);
                  break;
               case 239:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 238;
                  break;
               case 241:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 240;
                  break;
               case 242:
                  if (curChar == 104)
                     jjAddStates(49, 50);
                  break;
               case 244:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 243;
                  break;
               case 246:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 245;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 73:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(41, 43);
                  break;
               case 78:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(78, 79);
                  break;
               case 80:
               case 81:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(81, 79);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 256 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   248, 252, 254, 107, 111, 113, 120, 125, 129, 132, 138, 141, 145, 149, 153, 158, 
   160, 164, 171, 172, 181, 184, 193, 195, 196, 204, 209, 215, 221, 227, 232, 237, 
   242, 72, 77, 0, 90, 100, 60, 64, 70, 73, 74, 76, 80, 82, 248, 255, 
   254, 244, 246, 239, 241, 234, 236, 229, 231, 224, 226, 218, 220, 212, 213, 214, 
   206, 208, 197, 199, 201, 203, 185, 188, 191, 192, 182, 183, 177, 180, 44, 48, 
   52, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, "\57", null, null, "\162\157\157\164", "\163\161\162\164", 
"\163\165\155", "\151\156\164", "\160\162\157\144", "\144\145\162\151\166\145", 
"\160\144\145\162\151\166\145", "\145\170\151\163\164", "\146\157\162\141\154\154", null, "\154\157\147", 
"\146\141\143", "\145\170\160\157", null, null, null, null, null, 
"\74\155\141\164\162\151\170\50", null, null, null, "\46\151\156\146\151\156\73", "\145", "\46\160\151\73", null, 
null, null, "\46\156\141\142\154\141\73", null, null, "\72\75", "\136", "\56", 
"\50", "\51", "\54", "\173", "\175", "\133", "\135", "\174", 
"\74\166\145\153\164\157\162\76", "\74\144\165\141\154\166\145\153\164\157\162\76", 
"\74\155\141\164\162\151\170\76", "\51\76", };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xfffecf78ffff9481L, 0x0L, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[256];
private final int[] jjstateSet = new int[512];
protected char curChar;
public fsParserTokenManager(SimpleCharStream stream)
{
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public fsParserTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 256; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
