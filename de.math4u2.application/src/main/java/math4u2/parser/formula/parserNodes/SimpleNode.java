package math4u2.parser.formula.parserNodes;

import math4u2.view.formula.*;
import math4u2.parser.formula.*;

/* Generated By:JJTree: Do not edit this line. SimpleNode.java */

/**
 * Die Klasse implementiert die wichtigsten Funktionen für den ParsBaum und ist
 * Superklasse aller AST-Klassen in math4u2.parser.formular.parserNodes.
 * 
 * @author Christoph Beckmann
 */

public abstract class SimpleNode implements Node {
    protected Node parent;

    protected Node[] children;

    protected int id;

    protected fsParser parser;

    protected String symbol="";

    public SimpleNode(int i) {
        id = i;
    }

    public SimpleNode(fsParser p, int i) {
        this(i);
        parser = p;
    }
    
    public int getId(){
        return id;
    }

    public String getSymbol() {
        return symbol;
    }

    public void jjtOpen() {
    }

    public void jjtClose() {
    }

    public void jjtSetParent(Node n) {
        parent = n;
    }

    public Node jjtGetParent() {
        return parent;
    }

    public void jjtAddChild(Node n, int i) {
        if (children == null) {
            children = new Node[i + 1];
        } else if (i >= children.length) {
            Node c[] = new Node[i + 1];
            System.arraycopy(children, 0, c, 0, children.length);
            children = c;
        }
        children[i] = n;
    }

    public Node jjtGetChild(int i) {
        return children[i];
    }

    public int jjtGetNumChildren() {
        return (children == null) ? 0 : children.length;
    }



    public abstract void bakeComponents(AtomicBox ab);
    
    /**
     * return: Gibt den ASCII-String der Formel ab der entsprechenden Node zurück
     */
    public abstract String toString();
    
    /**
     * Baumdurchlauf für Testzwecke
     * @param node Startknoten
     */
    public static void treeTraversal(Node node){
        if(node== null){
            return;
        }
        System.out.println("class: "+node.getClass().getName());
        for (int i = 0; i < node.jjtGetNumChildren(); i++) {
            treeTraversal(node.jjtGetChild(i));
        }
    }


}

