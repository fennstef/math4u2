<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE math4u2 PUBLIC "-//FH Augsburg//DTD Math4u2 V2.2//DE" "http://www.math4u2.de/xml/dtd/math4u2_V2_2DTD.dtd">
<math4u2>
	<head>
		<Lektion_nur_in_math4u2_Version_2.2_ausfuehrbar/>
		<version>2.2</version>
		<module id="main" class="ShowMeGraph"/>
		<define>
			<function>
				<name>random</name>
				<import>java.util</import>
				<result-type>ScalarType</result-type>
				<arguments>
					<argument type="ScalarType" name="x"/>
					<argument type="ScalarType" name="left"/>
					<argument type="ScalarType" name="right"/>
					<argument type="ScalarType" name="size"/>
					<argument type="ScalarType" name="seed"/>					
				</arguments>
				<method><![CDATA[			
					public void init(){
						cache = new HashMap();
					}
				]]></method>				
				<method><![CDATA[			
					public void recalculate(int size, long seed){
						//HashMap holen				
						HashMap cacheMap = (HashMap) cache;
				
						//Daten berechnen und im Array abspeichern								
						double[] bins = new double[size];
				        Random random = new Random((long)seed);
				        for(int i=0; i<size; i++){
				           bins[i] = random.nextDouble();
				        }//for i
				
						//abspeichern
						cacheMap.put("oldSize", new Integer(size));
						cacheMap.put("oldSeed", new Long(seed));
						cacheMap.put("bins", bins);				
					}
				]]></method>
				<method><![CDATA[
					public boolean mustRecalculate(int size, long seed){
				        //hat sich etwas geändert?
						HashMap cacheMap = (HashMap) cache;
				        Object oldSize = cacheMap.get("oldSize");
				        Object oldSeed = cacheMap.get("oldSeed");				
				        if(oldSize==null || oldSeed==null)
				        	return true;
						
						if(((Integer)oldSize).intValue()!=size)
							return true;
				
						if(((Long)oldSeed).longValue()!=seed)
							return true;
				
						return false;
					}
				]]></method>							
				<method><![CDATA[
					public Object eval(Object[] args) throws MathException{
						//Parameter holen
						int k=0;
						double x = ((Result) args[k++]).getScalar();				
						double left = ((Result) args[k++]).getScalar();
						double right = ((Result) args[k++]).getScalar();
						int size = Math.floor(((Result) args[k++]).getScalar());
				        if(size<=0) size=1;
						long seed = Double.doubleToLongBits(((Result) args[k++]).getScalar());
				
						if(mustRecalculate(size, seed)){
				           recalculate(size, seed);
				        }//if
				
						HashMap cacheMap = (HashMap) cache;
						double[] bins = (double[]) cacheMap.get("bins");
				
				        int pos = Math.floor((x-left)/(right-left)*size);
				        if(pos<0 || pos>=size) 
							return new ScalarDoubleResult((double)0);				        
						else	
							return new ScalarDoubleResult(bins[pos]);
					}
				]]></method>
			</function>
		</define>
	</head>
	<body>
		<location>/Beispiele/Java-Schnittstelle</location>
		<title>Beispiel 06</title>
		<step>
			<title>Beispiel 6: Wiederverwendung von Ergebnissen (Caching)</title>
			<description>
Xml-Lektion hierzu:				
<code><![CDATA[
<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE math4u2 PUBLIC "-//FH Augsburg//DTD Math4u2 V2.2//DE" "http://www.math4u2.de/xml/dtd/math4u2_V2_2DTD.dtd">
<math4u2>
	<head>
		<Lektion_nur_in_math4u2_Version_2.2_ausfuehrbar/>
		<version>2.2</version>
		<module id="main" class="ShowMeGraph"/>
		<define>
			<function>
				<name>random</name>
				<import>java.util</import>
				<result-type>ScalarType</result-type>
				<arguments>
					<argument type="ScalarType" name="x"/>
					<argument type="ScalarType" name="left"/>
					<argument type="ScalarType" name="right"/>
					<argument type="ScalarType" name="size"/>
					<argument type="ScalarType" name="seed"/>					
				</arguments>
				<method><![CDATA[			
					public void init(){
						cache = new HashMap();
					}
				]]>]]&gt;<![CDATA[</method>		
				<method><![CDATA[			
					public void recalculate(int size, long seed){
						//HashMap holen								
						HashMap cacheMap = (HashMap) cache;
				
						//Daten berechnen und im Array abspeichern				
						double[] bins = new double[size];
				        Random random = new Random((long)seed);
				        for(int i=0; i<size; i++){
				           bins[i] = random.nextDouble();
				        }//for i
				
						//abspeichern
						cacheMap.put("oldSize", new Integer(size));
						cacheMap.put("oldSeed", new Long(seed));
						cacheMap.put("bins", bins);				
					}
				]]>]]&gt;<![CDATA[</method>
				<method><![CDATA[
					public boolean mustRecalculate(int size, long seed){
				        //hat sich etwas geändert?
						HashMap cacheMap = (HashMap) cache;
				        Object oldSize = cacheMap.get("oldSize");
				        Object oldSeed = cacheMap.get("oldSeed");				
				        if(oldSize==null || oldSeed==null)
				        	return true;
						
						if(((Integer)oldSize).intValue()!=size)
							return true;
				
						if(((Long)oldSeed).longValue()!=seed)
							return true;
				
						return false;
					}
				]]>]]&gt;<![CDATA[</method>							
				<method><![CDATA[
					public Object eval(Object[] args) throws MathException{
						//Parameter holen
						int k=0;
						double x = ((Result) args[k++]).getScalar();				
						double left = ((Result) args[k++]).getScalar();
						double right = ((Result) args[k++]).getScalar();
						int size = Math.floor(((Result) args[k++]).getScalar());
				        if(size<=0) size=1;
						long seed = Double.doubleToLongBits(((Result) args[k++]).getScalar());
				
						if(mustRecalculate(size, seed)){
				           recalculate(size, seed);
				        }//if
				
						HashMap cacheMap = (HashMap) cache;
						double[] bins = (double[]) cacheMap.get("bins");
				
				        int pos = Math.floor((x-left)/(right-left)*size);
				        if(pos<0 || pos>=size) 
							return new ScalarDoubleResult((double)0);				        
						else	
							return new ScalarDoubleResult(bins[pos]);
					}
				]]>]]&gt;<![CDATA[</method>
			</function>
		</define>
	</head>
	<body>
		<location>/Beispiele/Java-Schnittstelle</location>
		<title>Beispiel 06</title>
		<step>
			<title>Beispiel 6: Wiederverwendung von Ergebnissen (Caching)</title>
			<seq>
				<script>
					da.coordinateSystem(xMin=-5;xMax=5;yMin=-2;yMax=4;);
					da.zoom1To1(active=true);
					newObject(def=left:=0; select=true);
					newObject(def=right:=2; select=true);
					newObject(def=size:=28; select=true);
					newObject(def=seed:=0; select=true);
					newObject(def=f(x):=random(x,left,right,size,seed);target=da;);
					newObject(def=g(x):=sin(x)+1+(f(x)-0.5)/10;color=green;target=da;);
				</script>
			</seq>
		</step>
	</body>
</math4u2>
]]></code>				
			</description>
			<seq>
				<script>
					da.coordinateSystem(xMin=-5;xMax=5;yMin=-2;yMax=4;);
					da.zoom1To1(active=true);
					newObject(def=left:=0; select=true);
					newObject(def=right:=2; select=true);
					newObject(def=size:=28; select=true);
					newObject(def=seed:=0; select=true);
					newObject(def=f(x):=random(x,left,right,size,seed);target=da;);
					newObject(def=g(x):=sin(x)+1+(f(x)-0.5)/10;color=green;target=da;);
				</script>
			</seq>
		</step>
	</body>
</math4u2>