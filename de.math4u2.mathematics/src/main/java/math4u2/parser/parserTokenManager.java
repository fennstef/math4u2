/* Generated By:JavaCC: Do not edit this line. parserTokenManager.java */
package math4u2.parser;
import math4u2.mathematics.functions.*;
import math4u2.mathematics.termnodes.*;
import math4u2.mathematics.results.*;
import math4u2.mathematics.types.*;
import math4u2.application.MainWindow;
import math4u2.controller.*;
import math4u2.controller.reference.*;
import math4u2.mathematics.affine.*;
import math4u2.mathematics.affine.Map;
import math4u2.mathematics.collection.*;
import java.util.*;
import java.io.StringReader;
import math4u2.mathematics.types.*;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import math4u2.parser.importdata.*;
import math4u2.util.exception.ExceptionManager;
import math4u2.util.exception.parser.*;
import math4u2.view.gui.listview.ViewFactoryInterface;

public class parserTokenManager implements parserConstants
{
  public static  java.io.PrintStream debugStream = System.out;
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 59;
            return 74;
         }
         if ((active0 & 0x6050000L) != 0L)
         {
            jjmatchedKind = 59;
            return 144;
         }
         if ((active0 & 0x140111800000L) != 0L)
         {
            jjmatchedKind = 59;
            return 197;
         }
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 59;
            return 158;
         }
         if ((active1 & 0x4L) != 0L)
            return 198;
         if ((active0 & 0x80000020000L) != 0L)
         {
            jjmatchedKind = 59;
            return 51;
         }
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 59;
            return 65;
         }
         if ((active0 & 0x18008000000L) != 0L)
         {
            jjmatchedKind = 59;
            return 114;
         }
         return -1;
      case 1:
         if ((active0 & 0x6000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 1;
            return 143;
         }
         if ((active0 & 0x9d81198f8000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 1;
            return 197;
         }
         return -1;
      case 2:
         if ((active0 & 0x8000L) != 0L)
            return 197;
         if ((active0 & 0x6000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 2;
            return 142;
         }
         if ((active0 & 0x9d81198f0000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 2;
            return 197;
         }
         return -1;
      case 3:
         if ((active0 & 0x18090000L) != 0L)
            return 197;
         if ((active0 & 0x9d8101860000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 3;
            return 197;
         }
         if ((active0 & 0x6000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 3;
            return 199;
         }
         return -1;
      case 4:
         if ((active0 & 0x1c0101860000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 4;
            }
            return 197;
         }
         if ((active0 & 0x818000000000L) != 0L)
            return 197;
         if ((active0 & 0x6000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 22;
               jjmatchedPos = 4;
            }
            return 197;
         }
         return -1;
      case 5:
         if ((active0 & 0x40103820000L) != 0L)
            return 197;
         if ((active0 & 0x10000000000L) != 0L)
            return 200;
         if ((active0 & 0x180004040000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 5;
            return 197;
         }
         return -1;
      case 6:
         if ((active0 & 0x100000040000L) != 0L)
            return 197;
         if ((active0 & 0x80004000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 6;
            return 197;
         }
         return -1;
      case 7:
         if ((active0 & 0x80004000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 7;
            return 197;
         }
         return -1;
      case 8:
         if ((active0 & 0x80004000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 8;
            return 197;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 4);
      case 33:
         return jjStopAtPos(0, 11);
      case 36:
         return jjStopAtPos(0, 8);
      case 40:
         return jjStopAtPos(0, 60);
      case 41:
         return jjStopAtPos(0, 62);
      case 42:
         return jjStopAtPos(0, 7);
      case 43:
         return jjStopAtPos(0, 5);
      case 44:
         return jjStopAtPos(0, 61);
      case 45:
         return jjStopAtPos(0, 6);
      case 46:
         return jjStartNfaWithStates_0(0, 66, 198);
      case 47:
         return jjStopAtPos(0, 9);
      case 58:
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 60:
         return jjStopAtPos(0, 13);
      case 62:
         return jjStopAtPos(0, 14);
      case 91:
         return jjStopAtPos(0, 63);
      case 93:
         return jjStopAtPos(0, 64);
      case 94:
         return jjStopAtPos(0, 10);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x101000000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x80000020000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x100000000000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x18008000000L);
      case 107:
         return jjMoveStringLiteralDfa1_0(0x800000000000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x40000800000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x6050000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x8000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 123:
         return jjStopAtPos(0, 67);
      case 124:
         return jjStopAtPos(0, 65);
      case 125:
         return jjStopAtPos(0, 68);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
static private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(1, 12);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x840001880000L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x118020000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x18000000000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x6008000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, 0L);
}
static private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x180000000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x18009000000L);
      case 109:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 15, 197);
         break;
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x6000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000008a0000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L);
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
static private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 16, 197);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 197);
         break;
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x98000000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x100020000L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x7800000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000040000L);
      case 115:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 19, 197);
         break;
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 197);
         return jjMoveStringLiteralDfa4_0(active0, 0x900000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
static private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 47, 197);
         return jjMoveStringLiteralDfa5_0(active0, 0x10101800000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000040000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x6000000L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
static private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 48:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 40, 200);
         break;
      case 70:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L);
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 17, 197);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 197);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L);
      case 110:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 24, 197);
         break;
      case 114:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 23, 197);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 32, 197);
         break;
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000L);
      case 120:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 42, 197);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
static private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 18, 197);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L);
      case 120:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 44, 197);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
static private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
static private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 103:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
static private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(9, 26, 197);
         break;
      case 120:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 43, 197);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
static private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
static private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
static private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 197;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 114:
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddStates(0, 2);
                  break;
               case 199:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddStates(0, 2);
                  break;
               case 143:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddStates(0, 2);
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddStates(0, 2);
                  break;
               case 144:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddStates(0, 2);
                  break;
               case 158:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddStates(0, 2);
                  break;
               case 142:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddStates(0, 2);
                  break;
               case 198:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAdd(32);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAddTwoStates(28, 29);
                  }
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAddStates(3, 9);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(28, 32);
                  else if (curChar == 34)
                     jjCheckNAddStates(10, 12);
                  break;
               case 197:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddStates(0, 2);
                  break;
               case 200:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddStates(0, 2);
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddStates(0, 2);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddStates(0, 2);
                  break;
               case 12:
                  if (curChar == 34)
                     jjCheckNAddStates(10, 12);
                  break;
               case 13:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 15:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 16:
                  if (curChar == 34 && kind > 55)
                     kind = 55;
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(13, 16);
                  break;
               case 18:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 19:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 27:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(28, 32);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAddTwoStates(28, 29);
                  break;
               case 30:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(31);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(31);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(32);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAddStates(3, 9);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAddTwoStates(34, 29);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAddStates(17, 19);
                  break;
               case 36:
                  if (curChar == 46)
                     jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAddTwoStates(37, 29);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAddTwoStates(38, 39);
                  break;
               case 39:
                  if (curChar == 46)
                     jjCheckNAdd(40);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(40);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(41);
                  break;
               case 189:
                  if (curChar == 48 && kind > 38)
                     kind = 38;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 114:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 126)
                     jjCheckNAdd(26);
                  else if (curChar == 95)
                     jjCheckNAdd(24);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAddStates(20, 23);
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 126;
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 113;
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 199:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 126)
                     jjCheckNAdd(26);
                  else if (curChar == 95)
                     jjCheckNAdd(24);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAddStates(20, 23);
                  }
                  if (curChar == 116)
                  {
                     if (kind > 22)
                        kind = 22;
                  }
                  break;
               case 143:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 126)
                     jjCheckNAdd(26);
                  else if (curChar == 95)
                     jjCheckNAdd(24);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAddStates(20, 23);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 65:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 126)
                     jjCheckNAdd(26);
                  else if (curChar == 95)
                     jjCheckNAdd(24);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAddStates(20, 23);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 68;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 144:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 126)
                     jjCheckNAdd(26);
                  else if (curChar == 95)
                     jjCheckNAdd(24);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAddStates(20, 23);
                  }
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 150;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 146;
                  else if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 158:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 126)
                     jjCheckNAdd(26);
                  else if (curChar == 95)
                     jjCheckNAdd(24);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAddStates(20, 23);
                  }
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 179;
                  else if (curChar == 107)
                     jjstateSet[jjnewStateCnt++] = 175;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 170;
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 163;
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 142:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 126)
                     jjCheckNAdd(26);
                  else if (curChar == 95)
                     jjCheckNAdd(24);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAddStates(20, 23);
                  }
                  if (curChar == 107)
                     jjCheckNAdd(141);
                  break;
               case 5:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAddStates(20, 23);
                  }
                  if (curChar == 108)
                     jjAddStates(24, 27);
                  else if (curChar == 115)
                     jjAddStates(28, 32);
                  else if (curChar == 112)
                     jjAddStates(33, 35);
                  else if (curChar == 97)
                     jjAddStates(36, 38);
                  else if (curChar == 102)
                     jjAddStates(39, 41);
                  else if (curChar == 99)
                     jjAddStates(42, 44);
                  else if (curChar == 107)
                     jjAddStates(45, 47);
                  else if (curChar == 118)
                     jjAddStates(48, 49);
                  else if (curChar == 100)
                     jjAddStates(50, 51);
                  else if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 10;
                  else if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 197:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 126)
                     jjCheckNAdd(26);
                  else if (curChar == 95)
                     jjCheckNAdd(24);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAddStates(20, 23);
                  }
                  break;
               case 200:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 126)
                     jjCheckNAdd(26);
                  else if (curChar == 95)
                     jjCheckNAdd(24);
                  break;
               case 74:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 126)
                     jjCheckNAdd(26);
                  else if (curChar == 95)
                     jjCheckNAdd(24);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAddStates(20, 23);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 85;
                  else if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 81;
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 51:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 126)
                     jjCheckNAdd(26);
                  else if (curChar == 95)
                     jjCheckNAdd(24);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAddStates(20, 23);
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 58;
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 0:
                  if (curChar == 108 && kind > 34)
                     kind = 34;
                  break;
               case 1:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 2:
                  if (curChar == 107)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if (curChar == 101 && kind > 35)
                     kind = 35;
                  break;
               case 7:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 13:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 14:
                  if (curChar == 92)
                     jjAddStates(52, 54);
                  break;
               case 15:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 21:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddStates(20, 23);
                  break;
               case 22:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddStates(0, 2);
                  break;
               case 23:
                  if (curChar == 95)
                     jjCheckNAdd(24);
                  break;
               case 24:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(24);
                  break;
               case 25:
                  if (curChar == 126)
                     jjCheckNAdd(26);
                  break;
               case 26:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(26);
                  break;
               case 29:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(55, 56);
                  break;
               case 42:
                  if (curChar == 100)
                     jjAddStates(50, 51);
                  break;
               case 43:
                  if (curChar == 114 && kind > 46)
                     kind = 46;
                  break;
               case 44:
               case 52:
                  if (curChar == 111)
                     jjCheckNAdd(43);
                  break;
               case 45:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 107)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 53:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 118)
                     jjAddStates(48, 49);
                  break;
               case 61:
                  if (curChar == 114 && kind > 45)
                     kind = 45;
                  break;
               case 62:
               case 66:
                  if (curChar == 111)
                     jjCheckNAdd(61);
                  break;
               case 63:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if (curChar == 107)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 67:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 107)
                     jjAddStates(45, 47);
                  break;
               case 71:
                  if (curChar == 101 && kind > 20)
                     kind = 20;
                  break;
               case 72:
               case 88:
                  if (curChar == 118)
                     jjCheckNAdd(71);
                  break;
               case 73:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 75:
                  if (curChar == 103 && kind > 21)
                     kind = 21;
                  break;
               case 76:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 122)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 115 && kind > 33)
                     kind = 33;
                  break;
               case 84:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if (curChar == 99)
                     jjAddStates(42, 44);
                  break;
               case 89:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if (curChar == 101 && kind > 21)
                     kind = 21;
                  break;
               case 92:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 101:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if (curChar == 101 && kind > 33)
                     kind = 33;
                  break;
               case 104:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 108:
                  if (curChar == 102)
                     jjAddStates(39, 41);
                  break;
               case 109:
                  if (curChar == 101 && kind > 29)
                     kind = 29;
                  break;
               case 110:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 111:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 112:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 113:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 115:
                  if (curChar == 110 && kind > 36)
                     kind = 36;
                  break;
               case 116:
               case 122:
                  if (curChar == 111)
                     jjCheckNAdd(115);
                  break;
               case 117:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 119:
                  if (curChar == 107)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 121:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 123:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 124:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 125:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 126:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if (curChar == 97)
                     jjAddStates(36, 38);
                  break;
               case 129:
                  if (curChar == 97 && kind > 29)
                     kind = 29;
                  break;
               case 130:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 131:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 132:
                  if (curChar == 119 && kind > 30)
                     kind = 30;
                  break;
               case 133:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 134:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 135:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 136:
                  if (curChar == 101 && kind > 34)
                     kind = 34;
                  break;
               case 137:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 138:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 139:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 140:
                  if (curChar == 112)
                     jjAddStates(33, 35);
                  break;
               case 141:
                  if (curChar == 116 && kind > 22)
                     kind = 22;
                  break;
               case 145:
                  if (curChar == 110)
                     jjCheckNAdd(141);
                  break;
               case 146:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 147:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 148:
                  if (curChar == 108 && kind > 30)
                     kind = 30;
                  break;
               case 149:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 150:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 151:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 152:
                  if (curChar == 115)
                     jjAddStates(28, 32);
                  break;
               case 153:
                  if (curChar == 101 && kind > 31)
                     kind = 31;
                  break;
               case 154:
                  if (curChar == 107)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 155:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 156:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 157:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 159:
                  if (curChar == 104 && kind > 31)
                     kind = 31;
                  break;
               case 160:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 161:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 162:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 161;
                  break;
               case 163:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 162;
                  break;
               case 164:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 163;
                  break;
               case 165:
                  if (curChar == 116 && kind > 35)
                     kind = 35;
                  break;
               case 166:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 165;
                  break;
               case 167:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 168:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 169:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 170:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 171:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 170;
                  break;
               case 172:
                  if (curChar == 114 && kind > 41)
                     kind = 41;
                  break;
               case 173:
               case 177:
                  if (curChar == 97)
                     jjCheckNAdd(172);
                  break;
               case 174:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 173;
                  break;
               case 175:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 174;
                  break;
               case 176:
                  if (curChar == 107)
                     jjstateSet[jjnewStateCnt++] = 175;
                  break;
               case 178:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 177;
                  break;
               case 179:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 178;
                  break;
               case 180:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 179;
                  break;
               case 181:
                  if (curChar == 108)
                     jjAddStates(24, 27);
                  break;
               case 182:
                  if (curChar == 101 && kind > 37)
                     kind = 37;
                  break;
               case 183:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 182;
                  break;
               case 184:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 183;
                  break;
               case 185:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 184;
                  break;
               case 186:
                  if (curChar == 116 && kind > 37)
                     kind = 37;
                  break;
               case 187:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 186;
                  break;
               case 188:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 187;
                  break;
               case 190:
                  if (curChar == 101)
                     jjCheckNAdd(189);
                  break;
               case 191:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 190;
                  break;
               case 192:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 191;
                  break;
               case 193:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 192;
                  break;
               case 194:
                  if (curChar == 116)
                     jjCheckNAdd(189);
                  break;
               case 195:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 194;
                  break;
               case 196:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 195;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 13:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(10, 12);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 197 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   22, 23, 25, 34, 35, 36, 29, 38, 39, 41, 13, 14, 16, 13, 14, 18, 
   16, 35, 36, 29, 21, 22, 23, 25, 185, 188, 193, 196, 158, 164, 171, 176, 
   180, 144, 147, 151, 131, 135, 139, 114, 121, 127, 90, 102, 107, 74, 82, 86, 
   65, 69, 51, 59, 15, 17, 19, 30, 31, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, "\12", "\53", "\55", "\52", "\44", "\57", "\136", "\41", 
"\72\75", "\74", "\76", "\163\165\155", "\160\162\157\144", "\144\145\162\151\166\145", 
"\160\144\145\162\151\166\145", "\166\141\162\163", null, null, null, "\155\141\162\153\145\162", 
"\142\141\154\153\145\156", "\160\165\156\153\164\145", "\160\165\156\153\164\106\157\154\147\145", 
"\146\145\154\144", "\164\145\170\164", null, null, null, "\142\145\172\151\145\162", null, null, 
null, null, null, null, "\146\157\154\147\145", "\146\157\154\147\145\60", null, 
"\155\141\164\162\151\170", "\144\151\141\147\155\141\164\162\151\170", "\145\155\141\164\162\151\170", 
null, null, "\153\141\162\164\145", null, null, null, null, null, null, null, null, 
null, null, null, null, "\50", "\54", "\51", "\133", "\135", "\174", "\56", "\173", 
"\175", };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xf980fffffffffff1L, 0x1fL, 
};
static final long[] jjtoSkip = {
   0xeL, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[197];
static private final int[] jjstateSet = new int[394];
static protected char curChar;
public parserTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}
public parserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 197; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

public static Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002200L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
